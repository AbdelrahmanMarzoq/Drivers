
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a10  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000b40  08000b40  00010b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b68  08000b68  00010b70  2**0
                  CONTENTS
  4 .ARM          00000000  08000b68  08000b68  00010b70  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b68  08000b70  00010b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b68  08000b68  00010b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b6c  08000b6c  00010b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000000  08000b70  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08000b70  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b70  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a43  00000000  00000000  00010b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008e0  00000000  00000000  000145dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a74  00000000  00000000  00014ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000190  00000000  00000000  00015930  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000148  00000000  00000000  00015ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001dca  00000000  00000000  00015c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001ab8  00000000  00000000  000179d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007a5a  00000000  00000000  0001948a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00020ee4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000528  00000000  00000000  00020f60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b28 	.word	0x08000b28

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b28 	.word	0x08000b28

08000170 <Key_Init>:
#include "Keypad.h"

static uint8_t Btn[KEYPAD_ROW_][KEYPAD_COL_];

void Key_Init(Keypad_t *Keypad, const uint8_t D_char[KEYPAD_ROW_][KEYPAD_COL_])
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	for (int index = 0; index < KEYPAD_ROW_; index++)
 800017a:	2300      	movs	r3, #0
 800017c:	617b      	str	r3, [r7, #20]
 800017e:	e01d      	b.n	80001bc <Key_Init+0x4c>
	{
		Keypad->ROW[index].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000180:	687a      	ldr	r2, [r7, #4]
 8000182:	697b      	ldr	r3, [r7, #20]
 8000184:	00db      	lsls	r3, r3, #3
 8000186:	4413      	add	r3, r2
 8000188:	2204      	movs	r2, #4
 800018a:	719a      	strb	r2, [r3, #6]
		Keypad->ROW[index].GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	697b      	ldr	r3, [r7, #20]
 8000190:	00db      	lsls	r3, r3, #3
 8000192:	4413      	add	r3, r2
 8000194:	2202      	movs	r2, #2
 8000196:	71da      	strb	r2, [r3, #7]
		GPIO_INIT(&(Keypad->ROW[index]));
 8000198:	697b      	ldr	r3, [r7, #20]
 800019a:	00db      	lsls	r3, r3, #3
 800019c:	687a      	ldr	r2, [r7, #4]
 800019e:	4413      	add	r3, r2
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 fa79 	bl	8000698 <GPIO_INIT>
		GPIO_WRITE_PIN(&(Keypad->ROW[index]), LOW);
 80001a6:	697b      	ldr	r3, [r7, #20]
 80001a8:	00db      	lsls	r3, r3, #3
 80001aa:	687a      	ldr	r2, [r7, #4]
 80001ac:	4413      	add	r3, r2
 80001ae:	2100      	movs	r1, #0
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 fb09 	bl	80007c8 <GPIO_WRITE_PIN>
	for (int index = 0; index < KEYPAD_ROW_; index++)
 80001b6:	697b      	ldr	r3, [r7, #20]
 80001b8:	3301      	adds	r3, #1
 80001ba:	617b      	str	r3, [r7, #20]
 80001bc:	697b      	ldr	r3, [r7, #20]
 80001be:	2b03      	cmp	r3, #3
 80001c0:	ddde      	ble.n	8000180 <Key_Init+0x10>
	}
	for (int index = 0; index < KEYPAD_COL_; index++)
 80001c2:	2300      	movs	r3, #0
 80001c4:	613b      	str	r3, [r7, #16]
 80001c6:	e018      	b.n	80001fa <Key_Init+0x8a>
	{
		Keypad->COL[index].GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80001c8:	687a      	ldr	r2, [r7, #4]
 80001ca:	693b      	ldr	r3, [r7, #16]
 80001cc:	3304      	adds	r3, #4
 80001ce:	00db      	lsls	r3, r3, #3
 80001d0:	4413      	add	r3, r2
 80001d2:	2201      	movs	r2, #1
 80001d4:	719a      	strb	r2, [r3, #6]
		Keypad->COL[index].GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	693b      	ldr	r3, [r7, #16]
 80001da:	3304      	adds	r3, #4
 80001dc:	00db      	lsls	r3, r3, #3
 80001de:	4413      	add	r3, r2
 80001e0:	2202      	movs	r2, #2
 80001e2:	71da      	strb	r2, [r3, #7]
		GPIO_INIT(&(Keypad->COL[index]));
 80001e4:	693b      	ldr	r3, [r7, #16]
 80001e6:	3304      	adds	r3, #4
 80001e8:	00db      	lsls	r3, r3, #3
 80001ea:	687a      	ldr	r2, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 fa52 	bl	8000698 <GPIO_INIT>
	for (int index = 0; index < KEYPAD_COL_; index++)
 80001f4:	693b      	ldr	r3, [r7, #16]
 80001f6:	3301      	adds	r3, #1
 80001f8:	613b      	str	r3, [r7, #16]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	2b03      	cmp	r3, #3
 80001fe:	dde3      	ble.n	80001c8 <Key_Init+0x58>
	}

	for (int row = 0; row < KEYPAD_ROW_; row++)
 8000200:	2300      	movs	r3, #0
 8000202:	60fb      	str	r3, [r7, #12]
 8000204:	e01a      	b.n	800023c <Key_Init+0xcc>
	{
		for (int col = 0; col < KEYPAD_COL_; col++)
 8000206:	2300      	movs	r3, #0
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	e011      	b.n	8000230 <Key_Init+0xc0>
		{
			Btn[row][col] =  D_char[row][col];
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	009b      	lsls	r3, r3, #2
 8000210:	683a      	ldr	r2, [r7, #0]
 8000212:	441a      	add	r2, r3
 8000214:	68bb      	ldr	r3, [r7, #8]
 8000216:	4413      	add	r3, r2
 8000218:	7819      	ldrb	r1, [r3, #0]
 800021a:	4a0c      	ldr	r2, [pc, #48]	; (800024c <Key_Init+0xdc>)
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	009b      	lsls	r3, r3, #2
 8000220:	441a      	add	r2, r3
 8000222:	68bb      	ldr	r3, [r7, #8]
 8000224:	4413      	add	r3, r2
 8000226:	460a      	mov	r2, r1
 8000228:	701a      	strb	r2, [r3, #0]
		for (int col = 0; col < KEYPAD_COL_; col++)
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	3301      	adds	r3, #1
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	2b03      	cmp	r3, #3
 8000234:	ddea      	ble.n	800020c <Key_Init+0x9c>
	for (int row = 0; row < KEYPAD_ROW_; row++)
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	3301      	adds	r3, #1
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	2b03      	cmp	r3, #3
 8000240:	dde1      	ble.n	8000206 <Key_Init+0x96>
		}
	}
}
 8000242:	bf00      	nop
 8000244:	3718      	adds	r7, #24
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	2000001c 	.word	0x2000001c

08000250 <Key_get>:


uint8_t Key_get(const Keypad_t *Keypad)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b086      	sub	sp, #24
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	for (int row = 0; row < KEYPAD_ROW_ ; row++)
 8000258:	2300      	movs	r3, #0
 800025a:	617b      	str	r3, [r7, #20]
 800025c:	e037      	b.n	80002ce <Key_get+0x7e>
	{
		GPIO_WRITE_PIN(&(Keypad->ROW[row]), HIGH);
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	00db      	lsls	r3, r3, #3
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	4413      	add	r3, r2
 8000266:	2101      	movs	r1, #1
 8000268:	4618      	mov	r0, r3
 800026a:	f000 faad 	bl	80007c8 <GPIO_WRITE_PIN>
		for (int col = 0; col < KEYPAD_COL_; col++)
 800026e:	2300      	movs	r3, #0
 8000270:	613b      	str	r3, [r7, #16]
 8000272:	e01e      	b.n	80002b2 <Key_get+0x62>
		{
			if (GPIO_READ_PIN(&(Keypad->COL[col])) == 1) return Btn[row][col];
 8000274:	693b      	ldr	r3, [r7, #16]
 8000276:	3304      	adds	r3, #4
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	4413      	add	r3, r2
 800027e:	4618      	mov	r0, r3
 8000280:	f000 fa8e 	bl	80007a0 <GPIO_READ_PIN>
 8000284:	4603      	mov	r3, r0
 8000286:	2b01      	cmp	r3, #1
 8000288:	d107      	bne.n	800029a <Key_get+0x4a>
 800028a:	4a15      	ldr	r2, [pc, #84]	; (80002e0 <Key_get+0x90>)
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	441a      	add	r2, r3
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	4413      	add	r3, r2
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	e01d      	b.n	80002d6 <Key_get+0x86>
			for (int i = 0; i < 255; i++);
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	e002      	b.n	80002a6 <Key_get+0x56>
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	3301      	adds	r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	2bfe      	cmp	r3, #254	; 0xfe
 80002aa:	ddf9      	ble.n	80002a0 <Key_get+0x50>
		for (int col = 0; col < KEYPAD_COL_; col++)
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	3301      	adds	r3, #1
 80002b0:	613b      	str	r3, [r7, #16]
 80002b2:	693b      	ldr	r3, [r7, #16]
 80002b4:	2b03      	cmp	r3, #3
 80002b6:	dddd      	ble.n	8000274 <Key_get+0x24>
		}
		GPIO_WRITE_PIN(&(Keypad->ROW[row]), LOW);
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	00db      	lsls	r3, r3, #3
 80002bc:	687a      	ldr	r2, [r7, #4]
 80002be:	4413      	add	r3, r2
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 fa80 	bl	80007c8 <GPIO_WRITE_PIN>
	for (int row = 0; row < KEYPAD_ROW_ ; row++)
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	3301      	adds	r3, #1
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	ddc4      	ble.n	800025e <Key_get+0xe>
	}
	return (uint8_t)0;
 80002d4:	2300      	movs	r3, #0

}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3718      	adds	r7, #24
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	2000001c 	.word	0x2000001c

080002e4 <LCD_8bit_init>:
						/*		 Function Definition		 */
						/*************************************/


void LCD_8bit_init(LCD_8bit_t *LCD)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	// Init RS & EN & DATA Lines
	LCD->RS.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2204      	movs	r2, #4
 80002f0:	719a      	strb	r2, [r3, #6]
	LCD->RS.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2202      	movs	r2, #2
 80002f6:	71da      	strb	r2, [r3, #7]
	LCD->EN.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2204      	movs	r2, #4
 80002fc:	739a      	strb	r2, [r3, #14]
	LCD->EN.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2202      	movs	r2, #2
 8000302:	73da      	strb	r2, [r3, #15]
	GPIO_INIT(&(LCD->RS));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4618      	mov	r0, r3
 8000308:	f000 f9c6 	bl	8000698 <GPIO_INIT>
	GPIO_INIT(&(LCD->EN));
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	3308      	adds	r3, #8
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f9c1 	bl	8000698 <GPIO_INIT>
	GPIO_WRITE_PIN(&(LCD->RS), LOW);
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f000 fa54 	bl	80007c8 <GPIO_WRITE_PIN>
	GPIO_WRITE_PIN(&(LCD->EN), LOW);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3308      	adds	r3, #8
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fa4e 	bl	80007c8 <GPIO_WRITE_PIN>
	for (char index = 0; index < 8; index++)
 800032c:	2300      	movs	r3, #0
 800032e:	73fb      	strb	r3, [r7, #15]
 8000330:	e021      	b.n	8000376 <LCD_8bit_init+0x92>
	{
		LCD->Data[(int)index].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	687a      	ldr	r2, [r7, #4]
 8000336:	3302      	adds	r3, #2
 8000338:	00db      	lsls	r3, r3, #3
 800033a:	4413      	add	r3, r2
 800033c:	2204      	movs	r2, #4
 800033e:	719a      	strb	r2, [r3, #6]
		LCD->Data[(int)index].GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	3302      	adds	r3, #2
 8000346:	00db      	lsls	r3, r3, #3
 8000348:	4413      	add	r3, r2
 800034a:	2202      	movs	r2, #2
 800034c:	71da      	strb	r2, [r3, #7]
		GPIO_INIT(&(LCD->Data[(int)index]));
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	3302      	adds	r3, #2
 8000352:	00db      	lsls	r3, r3, #3
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	4413      	add	r3, r2
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f99d 	bl	8000698 <GPIO_INIT>
		GPIO_WRITE_PIN(&(LCD->Data[(int)index]), LOW);
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	3302      	adds	r3, #2
 8000362:	00db      	lsls	r3, r3, #3
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	4413      	add	r3, r2
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f000 fa2c 	bl	80007c8 <GPIO_WRITE_PIN>
	for (char index = 0; index < 8; index++)
 8000370:	7bfb      	ldrb	r3, [r7, #15]
 8000372:	3301      	adds	r3, #1
 8000374:	73fb      	strb	r3, [r7, #15]
 8000376:	7bfb      	ldrb	r3, [r7, #15]
 8000378:	2b07      	cmp	r3, #7
 800037a:	d9da      	bls.n	8000332 <LCD_8bit_init+0x4e>
	}

	// Following init from DataSheet
	// Delay from DataSheet 20 ms in future will write prof delay
	myWait(20);
 800037c:	2014      	movs	r0, #20
 800037e:	f000 f90c 	bl	800059a <myWait>
	// Send this command from DataSheet
	LCD_8bit_Command(LCD, _LCD_8BIT_MODE | _LCD_2LINE);
 8000382:	2138      	movs	r1, #56	; 0x38
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	f000 f865 	bl	8000454 <LCD_8bit_Command>
	// Delay from DataSheet 5 ms in future will write prof delay
	myWait(5);
 800038a:	2005      	movs	r0, #5
 800038c:	f000 f905 	bl	800059a <myWait>
	LCD_8bit_Command(LCD, _LCD_8BIT_MODE | _LCD_2LINE);
 8000390:	2138      	movs	r1, #56	; 0x38
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f000 f85e 	bl	8000454 <LCD_8bit_Command>
	// Delay from DataSheet 100 micro sec in future will write prof delay
	myWait(1);
 8000398:	2001      	movs	r0, #1
 800039a:	f000 f8fe 	bl	800059a <myWait>
	// Init it with 8bit mode and 2 Line 5*8
	LCD_8bit_Command(LCD, _LCD_8BIT_MODE | _LCD_2LINE | _LCD_DOT_MATRIX_7);
 800039e:	2138      	movs	r1, #56	; 0x38
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f000 f857 	bl	8000454 <LCD_8bit_Command>

	// Send command to clear Screen
	LCD_8bit_Command(LCD, _LCD_CLEAR);
 80003a6:	2101      	movs	r1, #1
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f000 f853 	bl	8000454 <LCD_8bit_Command>
	// Send command to set cursor at row 1 column 1
	LCD_8bit_Command(LCD, _LCD_RETURN_HOME);
 80003ae:	2102      	movs	r1, #2
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f000 f84f 	bl	8000454 <LCD_8bit_Command>
	// Send command to Display on and Blink cursor on
	LCD_8bit_Command(LCD, _LCD_DISPLAY_ON | _LCD_CURSOR_ON);
 80003b6:	210d      	movs	r1, #13
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f000 f84b 	bl	8000454 <LCD_8bit_Command>
	// Send command to set cursor increamenet toward right after writing without shift display
	LCD_8bit_Command(LCD, _LCD_INC_CURSOR_SHIFT_OFF);
 80003be:	2106      	movs	r1, #6
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f000 f847 	bl	8000454 <LCD_8bit_Command>
	// Send command that i ready to recieve data so i make the AC (Address counter) to First address in DDRAM
	LCD_8bit_Command(LCD, _LCD_DDRAM_START);
 80003c6:	2180      	movs	r1, #128	; 0x80
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f000 f843 	bl	8000454 <LCD_8bit_Command>
}
 80003ce:	bf00      	nop
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <LCD_8bit_Set_Cursor>:

void LCD_8bit_Set_Cursor(LCD_8bit_t *LCD, uint8_t row, uint8_t column)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	460b      	mov	r3, r1
 80003e2:	70fb      	strb	r3, [r7, #3]
 80003e4:	4613      	mov	r3, r2
 80003e6:	70bb      	strb	r3, [r7, #2]
	// Select row 1 or 2
	if ( (row == 2 || row == 1) && ((column > 0) && (column <= 16)) )
 80003e8:	78fb      	ldrb	r3, [r7, #3]
 80003ea:	2b02      	cmp	r3, #2
 80003ec:	d002      	beq.n	80003f4 <LCD_8bit_Set_Cursor+0x1c>
 80003ee:	78fb      	ldrb	r3, [r7, #3]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d129      	bne.n	8000448 <LCD_8bit_Set_Cursor+0x70>
 80003f4:	78bb      	ldrb	r3, [r7, #2]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d026      	beq.n	8000448 <LCD_8bit_Set_Cursor+0x70>
 80003fa:	78bb      	ldrb	r3, [r7, #2]
 80003fc:	2b10      	cmp	r3, #16
 80003fe:	d823      	bhi.n	8000448 <LCD_8bit_Set_Cursor+0x70>
	{
		switch(row)
 8000400:	78fb      	ldrb	r3, [r7, #3]
 8000402:	2b01      	cmp	r3, #1
 8000404:	d002      	beq.n	800040c <LCD_8bit_Set_Cursor+0x34>
 8000406:	2b02      	cmp	r3, #2
 8000408:	d00e      	beq.n	8000428 <LCD_8bit_Set_Cursor+0x50>
				LCD_8bit_Command(LCD, _LCD_ROW2_START + --column);
				AddressDD = 16 + column;
				break;
			}
	}
}
 800040a:	e01d      	b.n	8000448 <LCD_8bit_Set_Cursor+0x70>
				LCD_8bit_Command(LCD, _LCD_ROW1_START + --column);
 800040c:	78bb      	ldrb	r3, [r7, #2]
 800040e:	3b01      	subs	r3, #1
 8000410:	70bb      	strb	r3, [r7, #2]
 8000412:	78bb      	ldrb	r3, [r7, #2]
 8000414:	3b80      	subs	r3, #128	; 0x80
 8000416:	b2db      	uxtb	r3, r3
 8000418:	4619      	mov	r1, r3
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f000 f81a 	bl	8000454 <LCD_8bit_Command>
				AddressDD = 0 + column;
 8000420:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <LCD_8bit_Set_Cursor+0x78>)
 8000422:	78bb      	ldrb	r3, [r7, #2]
 8000424:	7013      	strb	r3, [r2, #0]
				break;
 8000426:	e00f      	b.n	8000448 <LCD_8bit_Set_Cursor+0x70>
				LCD_8bit_Command(LCD, _LCD_ROW2_START + --column);
 8000428:	78bb      	ldrb	r3, [r7, #2]
 800042a:	3b01      	subs	r3, #1
 800042c:	70bb      	strb	r3, [r7, #2]
 800042e:	78bb      	ldrb	r3, [r7, #2]
 8000430:	3b40      	subs	r3, #64	; 0x40
 8000432:	b2db      	uxtb	r3, r3
 8000434:	4619      	mov	r1, r3
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f000 f80c 	bl	8000454 <LCD_8bit_Command>
				AddressDD = 16 + column;
 800043c:	78bb      	ldrb	r3, [r7, #2]
 800043e:	3310      	adds	r3, #16
 8000440:	b2da      	uxtb	r2, r3
 8000442:	4b03      	ldr	r3, [pc, #12]	; (8000450 <LCD_8bit_Set_Cursor+0x78>)
 8000444:	701a      	strb	r2, [r3, #0]
				break;
 8000446:	bf00      	nop
}
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	2000002c 	.word	0x2000002c

08000454 <LCD_8bit_Command>:
void LCD_8bit_Command(LCD_8bit_t *LCD, uint8_t command)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	70fb      	strb	r3, [r7, #3]
	// To Tell LCD That i will send command Write RS LOW @ref INFO (LCD.H)
	GPIO_WRITE_PIN(&(LCD->RS), LOW);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2100      	movs	r1, #0
 8000464:	4618      	mov	r0, r3
 8000466:	f000 f9af 	bl	80007c8 <GPIO_WRITE_PIN>
	// Send 8bits Command on Wires Bit by Bit
	Send_8bit(LCD, command);
 800046a:	78fb      	ldrb	r3, [r7, #3]
 800046c:	4619      	mov	r1, r3
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f000 f84c 	bl	800050c <Send_8bit>
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <LCD_8bit_Print_Char>:

void LCD_8bit_Print_Char(LCD_8bit_t *LCD, uint8_t data){
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	460b      	mov	r3, r1
 8000486:	70fb      	strb	r3, [r7, #3]

	if (AddressDD == 16) 	LCD_8bit_Set_Cursor(LCD, 2, 1);
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <LCD_8bit_Print_Char+0x60>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b10      	cmp	r3, #16
 800048e:	d105      	bne.n	800049c <LCD_8bit_Print_Char+0x20>
 8000490:	2201      	movs	r2, #1
 8000492:	2102      	movs	r1, #2
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff ff9f 	bl	80003d8 <LCD_8bit_Set_Cursor>
 800049a:	e00b      	b.n	80004b4 <LCD_8bit_Print_Char+0x38>
	else if (AddressDD == 32)
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <LCD_8bit_Print_Char+0x60>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b20      	cmp	r3, #32
 80004a2:	d107      	bne.n	80004b4 <LCD_8bit_Print_Char+0x38>
	{
		LCD_8bit_Set_Cursor(LCD, 1, 1);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2101      	movs	r1, #1
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f7ff ff95 	bl	80003d8 <LCD_8bit_Set_Cursor>
		AddressDD = 0;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <LCD_8bit_Print_Char+0x60>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	701a      	strb	r2, [r3, #0]
	}
	AddressDD++;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <LCD_8bit_Print_Char+0x60>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <LCD_8bit_Print_Char+0x60>)
 80004be:	701a      	strb	r2, [r3, #0]
	// To Tell LCD That i will send Data Write RS HIGH @ref INFO (LCD.H)
	GPIO_WRITE_PIN(&(LCD->RS), HIGH);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2101      	movs	r1, #1
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 f97f 	bl	80007c8 <GPIO_WRITE_PIN>
	// Send 8bits data on Wires Bit by Bit
	Send_8bit(LCD, data);
 80004ca:	78fb      	ldrb	r3, [r7, #3]
 80004cc:	4619      	mov	r1, r3
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f000 f81c 	bl	800050c <Send_8bit>
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	2000002c 	.word	0x2000002c

080004e0 <LCD_8bit_Print>:

void LCD_8bit_Print(LCD_8bit_t *LCD, uint8_t *data){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
	while(*data) LCD_8bit_Print_Char(LCD, *data++);
 80004ea:	e007      	b.n	80004fc <LCD_8bit_Print+0x1c>
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	1c5a      	adds	r2, r3, #1
 80004f0:	603a      	str	r2, [r7, #0]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4619      	mov	r1, r3
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f7ff ffc0 	bl	800047c <LCD_8bit_Print_Char>
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d1f3      	bne.n	80004ec <LCD_8bit_Print+0xc>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <Send_8bit>:
	Send_8bit(LCD, data);
}


static void Send_8bit(LCD_8bit_t *LCD, uint8_t _data_command)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	70fb      	strb	r3, [r7, #3]
	// Send 8bits data | command bit by bit
	for (char i = 0; i < 8; i++)
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	e012      	b.n	8000544 <Send_8bit+0x38>
	{
		GPIO_WRITE_PIN( &(LCD->Data[(int)i]), ((_data_command >> (int)i) & 0x01) );
 800051e:	7bfb      	ldrb	r3, [r7, #15]
 8000520:	3302      	adds	r3, #2
 8000522:	00db      	lsls	r3, r3, #3
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	18d0      	adds	r0, r2, r3
 8000528:	78fa      	ldrb	r2, [r7, #3]
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	fa42 f303 	asr.w	r3, r2, r3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	b2db      	uxtb	r3, r3
 8000538:	4619      	mov	r1, r3
 800053a:	f000 f945 	bl	80007c8 <GPIO_WRITE_PIN>
	for (char i = 0; i < 8; i++)
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	3301      	adds	r3, #1
 8000542:	73fb      	strb	r3, [r7, #15]
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	2b07      	cmp	r3, #7
 8000548:	d9e9      	bls.n	800051e <Send_8bit+0x12>
	}

	// Enable Signal to Recieve Data or Command  |_ Falling Edge
	GPIO_WRITE_PIN(&(LCD->EN), HIGH);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3308      	adds	r3, #8
 800054e:	2101      	movs	r1, #1
 8000550:	4618      	mov	r0, r3
 8000552:	f000 f939 	bl	80007c8 <GPIO_WRITE_PIN>
	for(volatile char delay = 0; delay < 255; delay++);  //Small delay i will write professional delay after learning it
 8000556:	2300      	movs	r3, #0
 8000558:	73bb      	strb	r3, [r7, #14]
 800055a:	e004      	b.n	8000566 <Send_8bit+0x5a>
 800055c:	7bbb      	ldrb	r3, [r7, #14]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	3301      	adds	r3, #1
 8000562:	b2db      	uxtb	r3, r3
 8000564:	73bb      	strb	r3, [r7, #14]
 8000566:	7bbb      	ldrb	r3, [r7, #14]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	2bff      	cmp	r3, #255	; 0xff
 800056c:	d1f6      	bne.n	800055c <Send_8bit+0x50>
	GPIO_WRITE_PIN(&(LCD->EN), LOW);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	3308      	adds	r3, #8
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f000 f927 	bl	80007c8 <GPIO_WRITE_PIN>
	for(volatile char delay = 0; delay < 255; delay++);
 800057a:	2300      	movs	r3, #0
 800057c:	737b      	strb	r3, [r7, #13]
 800057e:	e004      	b.n	800058a <Send_8bit+0x7e>
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	3301      	adds	r3, #1
 8000586:	b2db      	uxtb	r3, r3
 8000588:	737b      	strb	r3, [r7, #13]
 800058a:	7b7b      	ldrb	r3, [r7, #13]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2bff      	cmp	r3, #255	; 0xff
 8000590:	d1f6      	bne.n	8000580 <Send_8bit+0x74>
}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <myWait>:
}



static void myWait(volatile int ms)
{
 800059a:	b480      	push	{r7}
 800059c:	b085      	sub	sp, #20
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
	for (volatile int i = 0; i < ms; i++) for (volatile int j = 0; j < 255; j++);
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	e00b      	b.n	80005c0 <myWait+0x26>
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	e002      	b.n	80005b4 <myWait+0x1a>
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	3301      	adds	r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	2bfe      	cmp	r3, #254	; 0xfe
 80005b8:	ddf9      	ble.n	80005ae <myWait+0x14>
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	3301      	adds	r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	dbef      	blt.n	80005a8 <myWait+0xe>

}
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr

080005d2 <GetPos>:
							/*************************************/
							/*       Function Definition         */
							/*************************************/

uint8_t GetPos(PINy_t PinNumber)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	4603      	mov	r3, r0
 80005da:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	2b80      	cmp	r3, #128	; 0x80
 80005e0:	d042      	beq.n	8000668 <GetPos+0x96>
 80005e2:	2b80      	cmp	r3, #128	; 0x80
 80005e4:	dc11      	bgt.n	800060a <GetPos+0x38>
 80005e6:	2b08      	cmp	r3, #8
 80005e8:	d036      	beq.n	8000658 <GetPos+0x86>
 80005ea:	2b08      	cmp	r3, #8
 80005ec:	dc06      	bgt.n	80005fc <GetPos+0x2a>
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d02e      	beq.n	8000650 <GetPos+0x7e>
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	d02e      	beq.n	8000654 <GetPos+0x82>
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d028      	beq.n	800064c <GetPos+0x7a>
 80005fa:	e047      	b.n	800068c <GetPos+0xba>
 80005fc:	2b20      	cmp	r3, #32
 80005fe:	d02f      	beq.n	8000660 <GetPos+0x8e>
 8000600:	2b40      	cmp	r3, #64	; 0x40
 8000602:	d02f      	beq.n	8000664 <GetPos+0x92>
 8000604:	2b10      	cmp	r3, #16
 8000606:	d029      	beq.n	800065c <GetPos+0x8a>
 8000608:	e040      	b.n	800068c <GetPos+0xba>
 800060a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800060e:	d033      	beq.n	8000678 <GetPos+0xa6>
 8000610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000614:	dc09      	bgt.n	800062a <GetPos+0x58>
 8000616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800061a:	d029      	beq.n	8000670 <GetPos+0x9e>
 800061c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000620:	d028      	beq.n	8000674 <GetPos+0xa2>
 8000622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000626:	d021      	beq.n	800066c <GetPos+0x9a>
 8000628:	e030      	b.n	800068c <GetPos+0xba>
 800062a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800062e:	d027      	beq.n	8000680 <GetPos+0xae>
 8000630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000634:	dc03      	bgt.n	800063e <GetPos+0x6c>
 8000636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800063a:	d01f      	beq.n	800067c <GetPos+0xaa>
 800063c:	e026      	b.n	800068c <GetPos+0xba>
 800063e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000642:	d01f      	beq.n	8000684 <GetPos+0xb2>
 8000644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000648:	d01e      	beq.n	8000688 <GetPos+0xb6>
 800064a:	e01f      	b.n	800068c <GetPos+0xba>
	{
	case GPIO_PIN0:
		return 0;
 800064c:	2300      	movs	r3, #0
 800064e:	e01e      	b.n	800068e <GetPos+0xbc>
		break;
	case GPIO_PIN1:
		return 4;
 8000650:	2304      	movs	r3, #4
 8000652:	e01c      	b.n	800068e <GetPos+0xbc>
		break;
	case GPIO_PIN2:
		return 8;
 8000654:	2308      	movs	r3, #8
 8000656:	e01a      	b.n	800068e <GetPos+0xbc>
		break;
	case GPIO_PIN3:
		return 12;
 8000658:	230c      	movs	r3, #12
 800065a:	e018      	b.n	800068e <GetPos+0xbc>
		break;
	case GPIO_PIN4:
		return 16;
 800065c:	2310      	movs	r3, #16
 800065e:	e016      	b.n	800068e <GetPos+0xbc>
		break;
	case GPIO_PIN5:
		return 20;
 8000660:	2314      	movs	r3, #20
 8000662:	e014      	b.n	800068e <GetPos+0xbc>
		break;
	case GPIO_PIN6:
		return 24;
 8000664:	2318      	movs	r3, #24
 8000666:	e012      	b.n	800068e <GetPos+0xbc>
		break;
	case GPIO_PIN7:
		return 28;
 8000668:	231c      	movs	r3, #28
 800066a:	e010      	b.n	800068e <GetPos+0xbc>
		break;
	case GPIO_PIN8:
		return 0;
 800066c:	2300      	movs	r3, #0
 800066e:	e00e      	b.n	800068e <GetPos+0xbc>
		break;
	case GPIO_PIN9:
		return 4;
 8000670:	2304      	movs	r3, #4
 8000672:	e00c      	b.n	800068e <GetPos+0xbc>
		break;
	case GPIO_PIN10:
		return 8;
 8000674:	2308      	movs	r3, #8
 8000676:	e00a      	b.n	800068e <GetPos+0xbc>
		break;
	case GPIO_PIN11:
		return 12;
 8000678:	230c      	movs	r3, #12
 800067a:	e008      	b.n	800068e <GetPos+0xbc>
		break;
	case GPIO_PIN12:
		return 16;
 800067c:	2310      	movs	r3, #16
 800067e:	e006      	b.n	800068e <GetPos+0xbc>
		break;
	case GPIO_PIN13:
		return 20;
 8000680:	2314      	movs	r3, #20
 8000682:	e004      	b.n	800068e <GetPos+0xbc>
		break;
	case GPIO_PIN14:
		return 24;
 8000684:	2318      	movs	r3, #24
 8000686:	e002      	b.n	800068e <GetPos+0xbc>
		break;
	case GPIO_PIN15:
		return 28;
 8000688:	231c      	movs	r3, #28
 800068a:	e000      	b.n	800068e <GetPos+0xbc>
		break;
	default :
		return 0;
 800068c:	2300      	movs	r3, #0
		break;
	}
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <GPIO_INIT>:

void GPIO_INIT(GPIO_PinConfig_t *myPin)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	volatile uint32_t *configReg = NULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config = 0x0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]
	configReg = (myPin->GPIO_PinNumber < GPIO_PIN8) ? (&(myPin->GPIOx->CRL)) : (&(myPin->GPIOx->CRH));
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	889b      	ldrh	r3, [r3, #4]
 80006ac:	2bff      	cmp	r3, #255	; 0xff
 80006ae:	d802      	bhi.n	80006b6 <GPIO_INIT+0x1e>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	e002      	b.n	80006bc <GPIO_INIT+0x24>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3304      	adds	r3, #4
 80006bc:	60bb      	str	r3, [r7, #8]
	// Clear CNF0[1:0] MODE0[1:0]
	(*configReg) &= ~(0xF << GetPos(myPin->GPIO_PinNumber));
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	889b      	ldrh	r3, [r3, #4]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff85 	bl	80005d2 <GetPos>
 80006c8:	4603      	mov	r3, r0
 80006ca:	461a      	mov	r2, r3
 80006cc:	230f      	movs	r3, #15
 80006ce:	4093      	lsls	r3, r2
 80006d0:	43da      	mvns	r2, r3
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	401a      	ands	r2, r3
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	601a      	str	r2, [r3, #0]

	if ( (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	799b      	ldrb	r3, [r3, #6]
 80006e0:	2b07      	cmp	r3, #7
 80006e2:	d00b      	beq.n	80006fc <GPIO_INIT+0x64>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	799b      	ldrb	r3, [r3, #6]
 80006e8:	2b06      	cmp	r3, #6
 80006ea:	d007      	beq.n	80006fc <GPIO_INIT+0x64>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	799b      	ldrb	r3, [r3, #6]
 80006f0:	2b05      	cmp	r3, #5
 80006f2:	d003      	beq.n	80006fc <GPIO_INIT+0x64>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	799b      	ldrb	r3, [r3, #6]
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d10e      	bne.n	800071a <GPIO_INIT+0x82>
	{
		// Set CNF0[1:0] -> (his mode)  MODE0[1:0] -> 00
		Pin_Config = ((((myPin->GPIO_MODE - 4) << 2) | (myPin->GPIO_OUTPUT_Speed)) & 0x0F);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	799b      	ldrb	r3, [r3, #6]
 8000700:	3b04      	subs	r3, #4
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	b25a      	sxtb	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	79db      	ldrb	r3, [r3, #7]
 800070a:	b25b      	sxtb	r3, r3
 800070c:	4313      	orrs	r3, r2
 800070e:	b25b      	sxtb	r3, r3
 8000710:	b2db      	uxtb	r3, r3
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	e030      	b.n	800077c <GPIO_INIT+0xe4>
	}
	else
	{
		if (myPin->GPIO_MODE == GPIO_MODE_INPUT_AF) // Considered input Floating
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	799b      	ldrb	r3, [r3, #6]
 800071e:	2b08      	cmp	r3, #8
 8000720:	d102      	bne.n	8000728 <GPIO_INIT+0x90>
		{
			Pin_Config = ((GPIO_MODE_INPUT_FLO << 2 | 0x0) & 0x0F);
 8000722:	2304      	movs	r3, #4
 8000724:	73fb      	strb	r3, [r7, #15]
 8000726:	e029      	b.n	800077c <GPIO_INIT+0xe4>
		}
		else if (myPin->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	799b      	ldrb	r3, [r3, #6]
 800072c:	2b02      	cmp	r3, #2
 800072e:	d10c      	bne.n	800074a <GPIO_INIT+0xb2>
		{
			Pin_Config = ((GPIO_MODE_INPUT_PU << 2 | 0x0) & 0x0F);
 8000730:	2308      	movs	r3, #8
 8000732:	73fb      	strb	r3, [r7, #15]
			//From Table 20. Port bit configuration table-> Set ODR->1 to set pin as Input Pull Up
			myPin->GPIOx->ODR |= (myPin->GPIO_PinNumber);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	68da      	ldr	r2, [r3, #12]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	889b      	ldrh	r3, [r3, #4]
 800073e:	4619      	mov	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	430a      	orrs	r2, r1
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	e018      	b.n	800077c <GPIO_INIT+0xe4>
		}
		else if (myPin->GPIO_MODE == GPIO_MODE_INPUT_PD)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	799b      	ldrb	r3, [r3, #6]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d10d      	bne.n	800076e <GPIO_INIT+0xd6>
		{
			Pin_Config = ((GPIO_MODE_INPUT_PU << 2) & 0x0F);
 8000752:	2308      	movs	r3, #8
 8000754:	73fb      	strb	r3, [r7, #15]
			//From Table 20. Port bit configuration table-> Set ODR->0 to set pin as Input Pull Down
			myPin->GPIOx->ODR &= ~(myPin->GPIO_PinNumber);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	68da      	ldr	r2, [r3, #12]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	889b      	ldrh	r3, [r3, #4]
 8000760:	43db      	mvns	r3, r3
 8000762:	4619      	mov	r1, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	400a      	ands	r2, r1
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	e006      	b.n	800077c <GPIO_INIT+0xe4>
		}
		else
		{
			Pin_Config = ((myPin->GPIO_MODE << 2 | 0x0) & 0x0F);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	799b      	ldrb	r3, [r3, #6]
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	b2db      	uxtb	r3, r3
 8000776:	f003 030f 	and.w	r3, r3, #15
 800077a:	73fb      	strb	r3, [r7, #15]
		}
	}
	// Writing on CRL OR CRH Reg
	(*configReg) |= ((Pin_Config) << GetPos(myPin->GPIO_PinNumber));
 800077c:	7bfc      	ldrb	r4, [r7, #15]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	889b      	ldrh	r3, [r3, #4]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff25 	bl	80005d2 <GetPos>
 8000788:	4603      	mov	r3, r0
 800078a:	fa04 f203 	lsl.w	r2, r4, r3
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	431a      	orrs	r2, r3
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	601a      	str	r2, [r3, #0]
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	bd90      	pop	{r4, r7, pc}

080007a0 <GPIO_READ_PIN>:

uint8_t GPIO_READ_PIN(GPIO_PinConfig_t *myPin)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	if (myPin->GPIOx->IDR & myPin->GPIO_PinNumber) return 1;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	8892      	ldrh	r2, [r2, #4]
 80007b2:	4013      	ands	r3, r2
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <GPIO_READ_PIN+0x1c>
 80007b8:	2301      	movs	r3, #1
 80007ba:	e000      	b.n	80007be <GPIO_READ_PIN+0x1e>
	return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <GPIO_WRITE_PIN>:
{
	return ((uint16_t)GPIOx->IDR);
}

void GPIO_WRITE_PIN(GPIO_PinConfig_t *myPin, Logic_t Mode)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	70fb      	strb	r3, [r7, #3]
	if (Mode) myPin->GPIOx->ODR |= (myPin->GPIO_PinNumber);
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d00a      	beq.n	80007f0 <GPIO_WRITE_PIN+0x28>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	68da      	ldr	r2, [r3, #12]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	889b      	ldrh	r3, [r3, #4]
 80007e4:	4619      	mov	r1, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	430a      	orrs	r2, r1
 80007ec:	60da      	str	r2, [r3, #12]
	else      myPin->GPIOx->ODR &= ~(myPin->GPIO_PinNumber);
}
 80007ee:	e00a      	b.n	8000806 <GPIO_WRITE_PIN+0x3e>
	else      myPin->GPIOx->ODR &= ~(myPin->GPIO_PinNumber);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	68da      	ldr	r2, [r3, #12]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	889b      	ldrh	r3, [r3, #4]
 80007fa:	43db      	mvns	r3, r3
 80007fc:	4619      	mov	r1, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	400a      	ands	r2, r1
 8000804:	60da      	str	r2, [r3, #12]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <GPIO_TOGGLE_PIN>:
{
	GPIOx->ODR = value;
}

void GPIO_TOGGLE_PIN(GPIO_PinConfig_t *myPin)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	myPin->GPIOx->ODR ^= (myPin->GPIO_PinNumber);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68da      	ldr	r2, [r3, #12]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	889b      	ldrh	r3, [r3, #4]
 8000822:	4619      	mov	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	404a      	eors	r2, r1
 800082a:	60da      	str	r2, [r3, #12]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr

08000836 <myWait>:

GPIO_PinConfig_t LED;


static void myWait(volatile int ms)
{
 8000836:	b480      	push	{r7}
 8000838:	b085      	sub	sp, #20
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
	for (volatile int i = 0; i < ms; i++)
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	e00b      	b.n	800085c <myWait+0x26>
	{
		for (volatile int j = 0; j < 255; j++);
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	e002      	b.n	8000850 <myWait+0x1a>
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	3301      	adds	r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2bfe      	cmp	r3, #254	; 0xfe
 8000854:	ddf9      	ble.n	800084a <myWait+0x14>
	for (volatile int i = 0; i < ms; i++)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3301      	adds	r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	429a      	cmp	r2, r3
 8000862:	dbef      	blt.n	8000844 <myWait+0xe>
	}
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
	...

08000870 <GPIO_test>:

void GPIO_test()
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
		LED.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <GPIO_test+0x3c>)
 8000876:	2204      	movs	r2, #4
 8000878:	719a      	strb	r2, [r3, #6]
		LED.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <GPIO_test+0x3c>)
 800087c:	2202      	movs	r2, #2
 800087e:	71da      	strb	r2, [r3, #7]
		LED.GPIO_PinNumber = GPIO_PIN0;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <GPIO_test+0x3c>)
 8000882:	2201      	movs	r2, #1
 8000884:	809a      	strh	r2, [r3, #4]
		LED.GPIOx = GPIOA;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <GPIO_test+0x3c>)
 8000888:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <GPIO_test+0x40>)
 800088a:	601a      	str	r2, [r3, #0]

		GPIO_INIT(&LED);
 800088c:	4807      	ldr	r0, [pc, #28]	; (80008ac <GPIO_test+0x3c>)
 800088e:	f7ff ff03 	bl	8000698 <GPIO_INIT>
		GPIO_WRITE_PIN(&LED, HIGH);
 8000892:	2101      	movs	r1, #1
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <GPIO_test+0x3c>)
 8000896:	f7ff ff97 	bl	80007c8 <GPIO_WRITE_PIN>
		myWait(20);
 800089a:	2014      	movs	r0, #20
 800089c:	f7ff ffcb 	bl	8000836 <myWait>
		GPIO_WRITE_PIN(&LED, HIGH);
 80008a0:	2101      	movs	r1, #1
 80008a2:	4802      	ldr	r0, [pc, #8]	; (80008ac <GPIO_test+0x3c>)
 80008a4:	f7ff ff90 	bl	80007c8 <GPIO_WRITE_PIN>

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000070 	.word	0x20000070
 80008b0:	40010800 	.word	0x40010800

080008b4 <KEY_init>:
	lcd1.Data[3].GPIOx = GPIOA;
	lcd1.Data[3].GPIO_PinNumber = GPIO_PIN8;

}*/

void KEY_init(){
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
	key1.ROW[0].GPIO_PinNumber = GPIO_PIN11;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <KEY_init+0x70>)
 80008ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008be:	809a      	strh	r2, [r3, #4]
	key1.ROW[0].GPIOx = GPIOB;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <KEY_init+0x70>)
 80008c2:	4a19      	ldr	r2, [pc, #100]	; (8000928 <KEY_init+0x74>)
 80008c4:	601a      	str	r2, [r3, #0]

	key1.ROW[1].GPIO_PinNumber = GPIO_PIN10;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <KEY_init+0x70>)
 80008c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008cc:	819a      	strh	r2, [r3, #12]
	key1.ROW[1].GPIOx = GPIOB;
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <KEY_init+0x70>)
 80008d0:	4a15      	ldr	r2, [pc, #84]	; (8000928 <KEY_init+0x74>)
 80008d2:	609a      	str	r2, [r3, #8]

	key1.ROW[2].GPIO_PinNumber = GPIO_PIN1;
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <KEY_init+0x70>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	829a      	strh	r2, [r3, #20]
	key1.ROW[2].GPIOx = GPIOB;
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <KEY_init+0x70>)
 80008dc:	4a12      	ldr	r2, [pc, #72]	; (8000928 <KEY_init+0x74>)
 80008de:	611a      	str	r2, [r3, #16]

	key1.ROW[3].GPIO_PinNumber = GPIO_PIN0;
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <KEY_init+0x70>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	839a      	strh	r2, [r3, #28]
	key1.ROW[3].GPIOx = GPIOB;
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <KEY_init+0x70>)
 80008e8:	4a0f      	ldr	r2, [pc, #60]	; (8000928 <KEY_init+0x74>)
 80008ea:	619a      	str	r2, [r3, #24]

	key1.COL[0].GPIO_PinNumber = GPIO_PIN7;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <KEY_init+0x70>)
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	849a      	strh	r2, [r3, #36]	; 0x24
	key1.COL[0].GPIOx = GPIOA;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <KEY_init+0x70>)
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <KEY_init+0x78>)
 80008f6:	621a      	str	r2, [r3, #32]

	key1.COL[1].GPIO_PinNumber = GPIO_PIN6;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <KEY_init+0x70>)
 80008fa:	2240      	movs	r2, #64	; 0x40
 80008fc:	859a      	strh	r2, [r3, #44]	; 0x2c
	key1.COL[1].GPIOx = GPIOA;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <KEY_init+0x70>)
 8000900:	4a0a      	ldr	r2, [pc, #40]	; (800092c <KEY_init+0x78>)
 8000902:	629a      	str	r2, [r3, #40]	; 0x28

	key1.COL[2].GPIO_PinNumber = GPIO_PIN5;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <KEY_init+0x70>)
 8000906:	2220      	movs	r2, #32
 8000908:	869a      	strh	r2, [r3, #52]	; 0x34
	key1.COL[2].GPIOx = GPIOA;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <KEY_init+0x70>)
 800090c:	4a07      	ldr	r2, [pc, #28]	; (800092c <KEY_init+0x78>)
 800090e:	631a      	str	r2, [r3, #48]	; 0x30

	key1.COL[3].GPIO_PinNumber = GPIO_PIN4;
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <KEY_init+0x70>)
 8000912:	2210      	movs	r2, #16
 8000914:	879a      	strh	r2, [r3, #60]	; 0x3c
	key1.COL[3].GPIOx = GPIOA;
 8000916:	4b03      	ldr	r3, [pc, #12]	; (8000924 <KEY_init+0x70>)
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <KEY_init+0x78>)
 800091a:	639a      	str	r2, [r3, #56]	; 0x38

}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	20000030 	.word	0x20000030
 8000928:	40010c00 	.word	0x40010c00
 800092c:	40010800 	.word	0x40010800

08000930 <LCD_init>:

void LCD_init()
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
	lcd2.RS.GPIOx = GPIOB;
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <LCD_init+0x94>)
 8000936:	4a24      	ldr	r2, [pc, #144]	; (80009c8 <LCD_init+0x98>)
 8000938:	601a      	str	r2, [r3, #0]
	lcd2.RS.GPIO_PinNumber = GPIO_PIN6;
 800093a:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <LCD_init+0x94>)
 800093c:	2240      	movs	r2, #64	; 0x40
 800093e:	809a      	strh	r2, [r3, #4]

	lcd2.EN.GPIOx = GPIOB;
 8000940:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <LCD_init+0x94>)
 8000942:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <LCD_init+0x98>)
 8000944:	609a      	str	r2, [r3, #8]
	lcd2.EN.GPIO_PinNumber = GPIO_PIN5;
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <LCD_init+0x94>)
 8000948:	2220      	movs	r2, #32
 800094a:	819a      	strh	r2, [r3, #12]

	lcd2.Data[0].GPIOx = GPIOB;
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <LCD_init+0x94>)
 800094e:	4a1e      	ldr	r2, [pc, #120]	; (80009c8 <LCD_init+0x98>)
 8000950:	611a      	str	r2, [r3, #16]
	lcd2.Data[0].GPIO_PinNumber = GPIO_PIN4;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <LCD_init+0x94>)
 8000954:	2210      	movs	r2, #16
 8000956:	829a      	strh	r2, [r3, #20]

	lcd2.Data[1].GPIOx = GPIOB;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <LCD_init+0x94>)
 800095a:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <LCD_init+0x98>)
 800095c:	619a      	str	r2, [r3, #24]
	lcd2.Data[1].GPIO_PinNumber = GPIO_PIN3;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <LCD_init+0x94>)
 8000960:	2208      	movs	r2, #8
 8000962:	839a      	strh	r2, [r3, #28]

	lcd2.Data[2].GPIOx = GPIOA;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <LCD_init+0x94>)
 8000966:	4a19      	ldr	r2, [pc, #100]	; (80009cc <LCD_init+0x9c>)
 8000968:	621a      	str	r2, [r3, #32]
	lcd2.Data[2].GPIO_PinNumber = GPIO_PIN15;
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <LCD_init+0x94>)
 800096c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000970:	849a      	strh	r2, [r3, #36]	; 0x24

	lcd2.Data[3].GPIOx = GPIOA;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <LCD_init+0x94>)
 8000974:	4a15      	ldr	r2, [pc, #84]	; (80009cc <LCD_init+0x9c>)
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
	lcd2.Data[3].GPIO_PinNumber = GPIO_PIN12;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <LCD_init+0x94>)
 800097a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800097e:	859a      	strh	r2, [r3, #44]	; 0x2c

	lcd2.Data[4].GPIOx = GPIOA;
 8000980:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <LCD_init+0x94>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <LCD_init+0x9c>)
 8000984:	631a      	str	r2, [r3, #48]	; 0x30
	lcd2.Data[4].GPIO_PinNumber = GPIO_PIN11;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <LCD_init+0x94>)
 8000988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800098c:	869a      	strh	r2, [r3, #52]	; 0x34

	lcd2.Data[5].GPIOx = GPIOA;
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <LCD_init+0x94>)
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <LCD_init+0x9c>)
 8000992:	639a      	str	r2, [r3, #56]	; 0x38
	lcd2.Data[5].GPIO_PinNumber = GPIO_PIN10;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <LCD_init+0x94>)
 8000996:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800099a:	879a      	strh	r2, [r3, #60]	; 0x3c

	lcd2.Data[6].GPIOx = GPIOA;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <LCD_init+0x94>)
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <LCD_init+0x9c>)
 80009a0:	641a      	str	r2, [r3, #64]	; 0x40
	lcd2.Data[6].GPIO_PinNumber = GPIO_PIN9;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <LCD_init+0x94>)
 80009a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	lcd2.Data[7].GPIOx = GPIOA;
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <LCD_init+0x94>)
 80009ae:	4a07      	ldr	r2, [pc, #28]	; (80009cc <LCD_init+0x9c>)
 80009b0:	649a      	str	r2, [r3, #72]	; 0x48
	lcd2.Data[7].GPIO_PinNumber = GPIO_PIN8;
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <LCD_init+0x94>)
 80009b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	20000078 	.word	0x20000078
 80009c8:	40010c00 	.word	0x40010c00
 80009cc:	40010800 	.word	0x40010800

080009d0 <clock_init>:

void clock_init()
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	// Enable CLK FOR GPIO B
	RCC_GPIOB_CLK_EN;
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <clock_init+0x24>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <clock_init+0x24>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	6193      	str	r3, [r2, #24]

	// Enable CLK FOR GPIO A
	RCC_GPIOA_CLK_EN;
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <clock_init+0x24>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <clock_init+0x24>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6193      	str	r3, [r2, #24]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	40021000 	.word	0x40021000

080009f8 <main>:


int main(void)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b089      	sub	sp, #36	; 0x24
 80009fc:	af00      	add	r7, sp, #0
	clock_init();
 80009fe:	f7ff ffe7 	bl	80009d0 <clock_init>
	LCD_init();
 8000a02:	f7ff ff95 	bl	8000930 <LCD_init>
	KEY_init();
 8000a06:	f7ff ff55 	bl	80008b4 <KEY_init>
	const uint8_t Char[KEYPAD_ROW_][KEYPAD_COL_] = {{'7', '8', '9', '/'},
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <main+0x7c>)
 8000a0c:	f107 040c 	add.w	r4, r7, #12
 8000a10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
													{'4', '5', '6', '*'},
													{'1', '2', '3', '-'},
													{'#', '0', '=', '+'}};
	Key_Init(&key1, Char);
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4816      	ldr	r0, [pc, #88]	; (8000a78 <main+0x80>)
 8000a1e:	f7ff fba7 	bl	8000170 <Key_Init>
	LCD_8bit_init(&lcd2);
 8000a22:	4816      	ldr	r0, [pc, #88]	; (8000a7c <main+0x84>)
 8000a24:	f7ff fc5e 	bl	80002e4 <LCD_8bit_init>
	GPIO_test();
 8000a28:	f7ff ff22 	bl	8000870 <GPIO_test>

	uint8_t Character[8] ={ 0b00000, 0b00000, 0b01010, 0b11111, 0b11111, 0b01110, 0b00100, 0b00000 };
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <main+0x88>)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a34:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_8bit_Print(&lcd2, "Hello World!");
 8000a38:	4912      	ldr	r1, [pc, #72]	; (8000a84 <main+0x8c>)
 8000a3a:	4810      	ldr	r0, [pc, #64]	; (8000a7c <main+0x84>)
 8000a3c:	f7ff fd50 	bl	80004e0 <LCD_8bit_Print>

//	myWait(1000);
//	LCD_8bit_Display_OFF(&lcd2);
//	myWait(1000);
//	LCD_8bit_Display_ON(&lcd2);
	LCD_8bit_Set_Cursor(&lcd2, 2, 10);
 8000a40:	220a      	movs	r2, #10
 8000a42:	2102      	movs	r1, #2
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <main+0x84>)
 8000a46:	f7ff fcc7 	bl	80003d8 <LCD_8bit_Set_Cursor>

	while(1)
	{

		uint8_t press = Key_get(&key1);
 8000a4a:	480b      	ldr	r0, [pc, #44]	; (8000a78 <main+0x80>)
 8000a4c:	f7ff fc00 	bl	8000250 <Key_get>
 8000a50:	4603      	mov	r3, r0
 8000a52:	77fb      	strb	r3, [r7, #31]
		if(press)   LCD_8bit_Print_Char(&lcd2, press);
 8000a54:	7ffb      	ldrb	r3, [r7, #31]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d004      	beq.n	8000a64 <main+0x6c>
 8000a5a:	7ffb      	ldrb	r3, [r7, #31]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <main+0x84>)
 8000a60:	f7ff fd0c 	bl	800047c <LCD_8bit_Print_Char>

		GPIO_TOGGLE_PIN(&LED);
 8000a64:	4808      	ldr	r0, [pc, #32]	; (8000a88 <main+0x90>)
 8000a66:	f7ff fed3 	bl	8000810 <GPIO_TOGGLE_PIN>
		myWait(10);
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f7ff fee3 	bl	8000836 <myWait>
	{
 8000a70:	e7eb      	b.n	8000a4a <main+0x52>
 8000a72:	bf00      	nop
 8000a74:	08000b50 	.word	0x08000b50
 8000a78:	20000030 	.word	0x20000030
 8000a7c:	20000078 	.word	0x20000078
 8000a80:	08000b60 	.word	0x08000b60
 8000a84:	08000b40 	.word	0x08000b40
 8000a88:	20000070 	.word	0x20000070

08000a8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a8e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a90:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a96:	490d      	ldr	r1, [pc, #52]	; (8000acc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <LoopForever+0xe>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aac:	4c0a      	ldr	r4, [pc, #40]	; (8000ad8 <LoopForever+0x16>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aba:	f000 f811 	bl	8000ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000abe:	f7ff ff9b 	bl	80009f8 <main>

08000ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ac2:	e7fe      	b.n	8000ac2 <LoopForever>
  ldr   r0, =_estack
 8000ac4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ad0:	08000b70 	.word	0x08000b70
  ldr r2, =_sbss
 8000ad4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ad8:	200000c8 	.word	0x200000c8

08000adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_2_IRQHandler>
	...

08000ae0 <__libc_init_array>:
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	2500      	movs	r5, #0
 8000ae4:	4e0c      	ldr	r6, [pc, #48]	; (8000b18 <__libc_init_array+0x38>)
 8000ae6:	4c0d      	ldr	r4, [pc, #52]	; (8000b1c <__libc_init_array+0x3c>)
 8000ae8:	1ba4      	subs	r4, r4, r6
 8000aea:	10a4      	asrs	r4, r4, #2
 8000aec:	42a5      	cmp	r5, r4
 8000aee:	d109      	bne.n	8000b04 <__libc_init_array+0x24>
 8000af0:	f000 f81a 	bl	8000b28 <_init>
 8000af4:	2500      	movs	r5, #0
 8000af6:	4e0a      	ldr	r6, [pc, #40]	; (8000b20 <__libc_init_array+0x40>)
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <__libc_init_array+0x44>)
 8000afa:	1ba4      	subs	r4, r4, r6
 8000afc:	10a4      	asrs	r4, r4, #2
 8000afe:	42a5      	cmp	r5, r4
 8000b00:	d105      	bne.n	8000b0e <__libc_init_array+0x2e>
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
 8000b04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b08:	4798      	blx	r3
 8000b0a:	3501      	adds	r5, #1
 8000b0c:	e7ee      	b.n	8000aec <__libc_init_array+0xc>
 8000b0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b12:	4798      	blx	r3
 8000b14:	3501      	adds	r5, #1
 8000b16:	e7f2      	b.n	8000afe <__libc_init_array+0x1e>
 8000b18:	08000b68 	.word	0x08000b68
 8000b1c:	08000b68 	.word	0x08000b68
 8000b20:	08000b68 	.word	0x08000b68
 8000b24:	08000b6c 	.word	0x08000b6c

08000b28 <_init>:
 8000b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2a:	bf00      	nop
 8000b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b2e:	bc08      	pop	{r3}
 8000b30:	469e      	mov	lr, r3
 8000b32:	4770      	bx	lr

08000b34 <_fini>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	bf00      	nop
 8000b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3a:	bc08      	pop	{r3}
 8000b3c:	469e      	mov	lr, r3
 8000b3e:	4770      	bx	lr
