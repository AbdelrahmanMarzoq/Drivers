
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001324  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001454  08001454  00011454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014b4  080014b4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080014b4  080014b4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014b4  080014b4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014b4  080014b4  000114b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014b8  080014b8  000114b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080014bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000064  08001520  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08001520  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000043d4  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a56  00000000  00000000  00024461  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009c8  00000000  00000000  00024eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000198  00000000  00000000  00025880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000140  00000000  00000000  00025a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002801  00000000  00000000  00025b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002200  00000000  00000000  00028359  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000090c4  00000000  00000000  0002a559  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003361d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000858  00000000  00000000  00033698  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	0800143c 	.word	0x0800143c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	0800143c 	.word	0x0800143c

08000170 <Key_Init>:
#include "Keypad.h"

static uint8_t Btn[KEYPAD_ROW_][KEYPAD_COL_];

void Key_Init(Keypad_t *Keypad, const uint8_t D_char[KEYPAD_ROW_][KEYPAD_COL_])
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	// Init Rows Wires to be O/P and Logic LOW
	for (int index = 0; index < KEYPAD_ROW_; index++)
 800017a:	2300      	movs	r3, #0
 800017c:	617b      	str	r3, [r7, #20]
 800017e:	e01d      	b.n	80001bc <Key_Init+0x4c>
	{
		Keypad->ROW[index].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000180:	687a      	ldr	r2, [r7, #4]
 8000182:	697b      	ldr	r3, [r7, #20]
 8000184:	00db      	lsls	r3, r3, #3
 8000186:	4413      	add	r3, r2
 8000188:	2204      	movs	r2, #4
 800018a:	719a      	strb	r2, [r3, #6]
		Keypad->ROW[index].GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	697b      	ldr	r3, [r7, #20]
 8000190:	00db      	lsls	r3, r3, #3
 8000192:	4413      	add	r3, r2
 8000194:	2202      	movs	r2, #2
 8000196:	71da      	strb	r2, [r3, #7]
		GPIO_INIT(&(Keypad->ROW[index]));
 8000198:	697b      	ldr	r3, [r7, #20]
 800019a:	00db      	lsls	r3, r3, #3
 800019c:	687a      	ldr	r2, [r7, #4]
 800019e:	4413      	add	r3, r2
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 faab 	bl	80006fc <GPIO_INIT>
		GPIO_WRITE_PIN(&(Keypad->ROW[index]), LOW);
 80001a6:	697b      	ldr	r3, [r7, #20]
 80001a8:	00db      	lsls	r3, r3, #3
 80001aa:	687a      	ldr	r2, [r7, #4]
 80001ac:	4413      	add	r3, r2
 80001ae:	2100      	movs	r1, #0
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 fb3b 	bl	800082c <GPIO_WRITE_PIN>
	for (int index = 0; index < KEYPAD_ROW_; index++)
 80001b6:	697b      	ldr	r3, [r7, #20]
 80001b8:	3301      	adds	r3, #1
 80001ba:	617b      	str	r3, [r7, #20]
 80001bc:	697b      	ldr	r3, [r7, #20]
 80001be:	2b03      	cmp	r3, #3
 80001c0:	ddde      	ble.n	8000180 <Key_Init+0x10>
	}

	// Init Columns Wire to be I/P
	for (int index = 0; index < KEYPAD_COL_; index++)
 80001c2:	2300      	movs	r3, #0
 80001c4:	613b      	str	r3, [r7, #16]
 80001c6:	e018      	b.n	80001fa <Key_Init+0x8a>
	{
		Keypad->COL[index].GPIO_MODE = GPIO_MODE_INPUT_PD;
 80001c8:	687a      	ldr	r2, [r7, #4]
 80001ca:	693b      	ldr	r3, [r7, #16]
 80001cc:	3304      	adds	r3, #4
 80001ce:	00db      	lsls	r3, r3, #3
 80001d0:	4413      	add	r3, r2
 80001d2:	2203      	movs	r2, #3
 80001d4:	719a      	strb	r2, [r3, #6]
		Keypad->COL[index].GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	693b      	ldr	r3, [r7, #16]
 80001da:	3304      	adds	r3, #4
 80001dc:	00db      	lsls	r3, r3, #3
 80001de:	4413      	add	r3, r2
 80001e0:	2202      	movs	r2, #2
 80001e2:	71da      	strb	r2, [r3, #7]
		GPIO_INIT(&(Keypad->COL[index]));
 80001e4:	693b      	ldr	r3, [r7, #16]
 80001e6:	3304      	adds	r3, #4
 80001e8:	00db      	lsls	r3, r3, #3
 80001ea:	687a      	ldr	r2, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 fa84 	bl	80006fc <GPIO_INIT>
	for (int index = 0; index < KEYPAD_COL_; index++)
 80001f4:	693b      	ldr	r3, [r7, #16]
 80001f6:	3301      	adds	r3, #1
 80001f8:	613b      	str	r3, [r7, #16]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	2b03      	cmp	r3, #3
 80001fe:	dde3      	ble.n	80001c8 <Key_Init+0x58>
	}

	// Draw Keypad (2D Array) with Custom char
	for (int row = 0; row < KEYPAD_ROW_; row++)
 8000200:	2300      	movs	r3, #0
 8000202:	60fb      	str	r3, [r7, #12]
 8000204:	e01a      	b.n	800023c <Key_Init+0xcc>
	{
		for (int col = 0; col < KEYPAD_COL_; col++)
 8000206:	2300      	movs	r3, #0
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	e011      	b.n	8000230 <Key_Init+0xc0>
		{
			Btn[row][col] =  D_char[row][col];
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	009b      	lsls	r3, r3, #2
 8000210:	683a      	ldr	r2, [r7, #0]
 8000212:	441a      	add	r2, r3
 8000214:	68bb      	ldr	r3, [r7, #8]
 8000216:	4413      	add	r3, r2
 8000218:	7819      	ldrb	r1, [r3, #0]
 800021a:	4a0c      	ldr	r2, [pc, #48]	; (800024c <Key_Init+0xdc>)
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	009b      	lsls	r3, r3, #2
 8000220:	441a      	add	r2, r3
 8000222:	68bb      	ldr	r3, [r7, #8]
 8000224:	4413      	add	r3, r2
 8000226:	460a      	mov	r2, r1
 8000228:	701a      	strb	r2, [r3, #0]
		for (int col = 0; col < KEYPAD_COL_; col++)
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	3301      	adds	r3, #1
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	2b03      	cmp	r3, #3
 8000234:	ddea      	ble.n	800020c <Key_Init+0x9c>
	for (int row = 0; row < KEYPAD_ROW_; row++)
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	3301      	adds	r3, #1
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	2b03      	cmp	r3, #3
 8000240:	dde1      	ble.n	8000206 <Key_Init+0x96>
		}
	}
}
 8000242:	bf00      	nop
 8000244:	3718      	adds	r7, #24
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	20000080 	.word	0x20000080

08000250 <Key_get>:


uint8_t Key_get(Keypad_t *Keypad)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b086      	sub	sp, #24
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	// Select Cell that you pressed on
	for (int row = 0; row < KEYPAD_ROW_; row++)
 8000258:	2300      	movs	r3, #0
 800025a:	617b      	str	r3, [r7, #20]
 800025c:	e049      	b.n	80002f2 <Key_get+0xa2>
	{
		GPIO_WRITE_PIN(&(Keypad->ROW[row]), HIGH);
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	00db      	lsls	r3, r3, #3
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	4413      	add	r3, r2
 8000266:	2101      	movs	r1, #1
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fadf 	bl	800082c <GPIO_WRITE_PIN>
		for (volatile int i = 0; i < 255; i++);
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	e002      	b.n	800027a <Key_get+0x2a>
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	3301      	adds	r3, #1
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	2bfe      	cmp	r3, #254	; 0xfe
 800027e:	ddf9      	ble.n	8000274 <Key_get+0x24>
		for (int col = 0; col < KEYPAD_COL_; col++)
 8000280:	2300      	movs	r3, #0
 8000282:	613b      	str	r3, [r7, #16]
 8000284:	e027      	b.n	80002d6 <Key_get+0x86>
		{

			if (GPIO_READ_PIN(&(Keypad->COL[col])) == HIGH)
 8000286:	693b      	ldr	r3, [r7, #16]
 8000288:	3304      	adds	r3, #4
 800028a:	00db      	lsls	r3, r3, #3
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	4413      	add	r3, r2
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fab7 	bl	8000804 <GPIO_READ_PIN>
 8000296:	4603      	mov	r3, r0
 8000298:	2b01      	cmp	r3, #1
 800029a:	d119      	bne.n	80002d0 <Key_get+0x80>
			{
				// In Future will Write Professional Delay
				for (volatile int i = 0; i < 100000; i++);
 800029c:	2300      	movs	r3, #0
 800029e:	60bb      	str	r3, [r7, #8]
 80002a0:	e002      	b.n	80002a8 <Key_get+0x58>
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	3301      	adds	r3, #1
 80002a6:	60bb      	str	r3, [r7, #8]
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	4a16      	ldr	r2, [pc, #88]	; (8000304 <Key_get+0xb4>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	ddf8      	ble.n	80002a2 <Key_get+0x52>
				GPIO_WRITE_PIN(&(Keypad->ROW[row]), LOW);
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	00db      	lsls	r3, r3, #3
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	4413      	add	r3, r2
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fab6 	bl	800082c <GPIO_WRITE_PIN>
				return Btn[row][col];
 80002c0:	4a11      	ldr	r2, [pc, #68]	; (8000308 <Key_get+0xb8>)
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	441a      	add	r2, r3
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	4413      	add	r3, r2
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	e014      	b.n	80002fa <Key_get+0xaa>
		for (int col = 0; col < KEYPAD_COL_; col++)
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	3301      	adds	r3, #1
 80002d4:	613b      	str	r3, [r7, #16]
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	2b03      	cmp	r3, #3
 80002da:	ddd4      	ble.n	8000286 <Key_get+0x36>
			}
		}
		GPIO_WRITE_PIN(&(Keypad->ROW[row]), LOW);
 80002dc:	697b      	ldr	r3, [r7, #20]
 80002de:	00db      	lsls	r3, r3, #3
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	4413      	add	r3, r2
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 faa0 	bl	800082c <GPIO_WRITE_PIN>
	for (int row = 0; row < KEYPAD_ROW_; row++)
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	3301      	adds	r3, #1
 80002f0:	617b      	str	r3, [r7, #20]
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	2b03      	cmp	r3, #3
 80002f6:	ddb2      	ble.n	800025e <Key_get+0xe>
	}

	// In case you didn`t Press any thing
	return (uint8_t)' ';
 80002f8:	2320      	movs	r3, #32
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	0001869f 	.word	0x0001869f
 8000308:	20000080 	.word	0x20000080

0800030c <LCD_8bit_init>:
						/*		 Function Definition		 */
						/*************************************/


void LCD_8bit_init(LCD_8bit_t *LCD)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	// Init RS & EN & DATA Lines
	LCD->RS.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2204      	movs	r2, #4
 8000318:	719a      	strb	r2, [r3, #6]
	LCD->RS.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2202      	movs	r2, #2
 800031e:	71da      	strb	r2, [r3, #7]
	LCD->EN.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2204      	movs	r2, #4
 8000324:	739a      	strb	r2, [r3, #14]
	LCD->EN.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2202      	movs	r2, #2
 800032a:	73da      	strb	r2, [r3, #15]
	GPIO_INIT(&(LCD->RS));
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4618      	mov	r0, r3
 8000330:	f000 f9e4 	bl	80006fc <GPIO_INIT>
	GPIO_INIT(&(LCD->EN));
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3308      	adds	r3, #8
 8000338:	4618      	mov	r0, r3
 800033a:	f000 f9df 	bl	80006fc <GPIO_INIT>
	GPIO_WRITE_PIN(&(LCD->RS), LOW);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f000 fa72 	bl	800082c <GPIO_WRITE_PIN>
	GPIO_WRITE_PIN(&(LCD->EN), LOW);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3308      	adds	r3, #8
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f000 fa6c 	bl	800082c <GPIO_WRITE_PIN>
	for (char index = 0; index < 8; index++)
 8000354:	2300      	movs	r3, #0
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e021      	b.n	800039e <LCD_8bit_init+0x92>
	{
		LCD->Data[(int)index].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	687a      	ldr	r2, [r7, #4]
 800035e:	3302      	adds	r3, #2
 8000360:	00db      	lsls	r3, r3, #3
 8000362:	4413      	add	r3, r2
 8000364:	2204      	movs	r2, #4
 8000366:	719a      	strb	r2, [r3, #6]
		LCD->Data[(int)index].GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	3302      	adds	r3, #2
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	4413      	add	r3, r2
 8000372:	2202      	movs	r2, #2
 8000374:	71da      	strb	r2, [r3, #7]
		GPIO_INIT(&(LCD->Data[(int)index]));
 8000376:	7bfb      	ldrb	r3, [r7, #15]
 8000378:	3302      	adds	r3, #2
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	4413      	add	r3, r2
 8000380:	4618      	mov	r0, r3
 8000382:	f000 f9bb 	bl	80006fc <GPIO_INIT>
		GPIO_WRITE_PIN(&(LCD->Data[(int)index]), LOW);
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	3302      	adds	r3, #2
 800038a:	00db      	lsls	r3, r3, #3
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	4413      	add	r3, r2
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f000 fa4a 	bl	800082c <GPIO_WRITE_PIN>
	for (char index = 0; index < 8; index++)
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	3301      	adds	r3, #1
 800039c:	73fb      	strb	r3, [r7, #15]
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	2b07      	cmp	r3, #7
 80003a2:	d9da      	bls.n	800035a <LCD_8bit_init+0x4e>
	}

	// Following init from DataSheet
	// Delay from DataSheet 20 ms in future will write prof delay
	myWait(20);
 80003a4:	2014      	movs	r0, #20
 80003a6:	f000 f92a 	bl	80005fe <myWait>
	// Send this command from DataSheet
	LCD_8bit_Command(LCD, _LCD_8BIT_MODE | _LCD_2LINE);
 80003aa:	2138      	movs	r1, #56	; 0x38
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f000 f865 	bl	800047c <LCD_8bit_Command>
	// Delay from DataSheet 5 ms in future will write prof delay
	myWait(5);
 80003b2:	2005      	movs	r0, #5
 80003b4:	f000 f923 	bl	80005fe <myWait>
	LCD_8bit_Command(LCD, _LCD_8BIT_MODE | _LCD_2LINE);
 80003b8:	2138      	movs	r1, #56	; 0x38
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f000 f85e 	bl	800047c <LCD_8bit_Command>
	// Delay from DataSheet 100 micro sec in future will write prof delay
	myWait(1);
 80003c0:	2001      	movs	r0, #1
 80003c2:	f000 f91c 	bl	80005fe <myWait>
	// Init it with 8bit mode and 2 Line 5*8
	LCD_8bit_Command(LCD, _LCD_8BIT_MODE | _LCD_2LINE | _LCD_DOT_MATRIX_7);
 80003c6:	2138      	movs	r1, #56	; 0x38
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f000 f857 	bl	800047c <LCD_8bit_Command>

	// Send command to clear Screen
	LCD_8bit_Command(LCD, _LCD_CLEAR);
 80003ce:	2101      	movs	r1, #1
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	f000 f853 	bl	800047c <LCD_8bit_Command>
	// Send command to set cursor at row 1 column 1
	LCD_8bit_Command(LCD, _LCD_RETURN_HOME);
 80003d6:	2102      	movs	r1, #2
 80003d8:	6878      	ldr	r0, [r7, #4]
 80003da:	f000 f84f 	bl	800047c <LCD_8bit_Command>
	// Send command to Display on and Blink cursor on
	LCD_8bit_Command(LCD, _LCD_UNDERLINE_CURSOR_ON);
 80003de:	210e      	movs	r1, #14
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f000 f84b 	bl	800047c <LCD_8bit_Command>
	// Send command to set cursor increamenet toward right after writing without shift display
	LCD_8bit_Command(LCD, _LCD_INC_CURSOR_SHIFT_OFF);
 80003e6:	2106      	movs	r1, #6
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f000 f847 	bl	800047c <LCD_8bit_Command>
	// Send command that i ready to recieve data so i make the AC (Address counter) to First address in DDRAM
	LCD_8bit_Command(LCD, _LCD_DDRAM_START);
 80003ee:	2180      	movs	r1, #128	; 0x80
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f000 f843 	bl	800047c <LCD_8bit_Command>
}
 80003f6:	bf00      	nop
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <LCD_8bit_Set_Cursor>:

void LCD_8bit_Set_Cursor(LCD_8bit_t *LCD, uint8_t row, uint8_t column)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	460b      	mov	r3, r1
 800040a:	70fb      	strb	r3, [r7, #3]
 800040c:	4613      	mov	r3, r2
 800040e:	70bb      	strb	r3, [r7, #2]
	// Select row 1 or 2
	if ( (row == 2 || row == 1) && ((column > 0) && (column <= 16)) )
 8000410:	78fb      	ldrb	r3, [r7, #3]
 8000412:	2b02      	cmp	r3, #2
 8000414:	d002      	beq.n	800041c <LCD_8bit_Set_Cursor+0x1c>
 8000416:	78fb      	ldrb	r3, [r7, #3]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d129      	bne.n	8000470 <LCD_8bit_Set_Cursor+0x70>
 800041c:	78bb      	ldrb	r3, [r7, #2]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d026      	beq.n	8000470 <LCD_8bit_Set_Cursor+0x70>
 8000422:	78bb      	ldrb	r3, [r7, #2]
 8000424:	2b10      	cmp	r3, #16
 8000426:	d823      	bhi.n	8000470 <LCD_8bit_Set_Cursor+0x70>
	{
		switch(row)
 8000428:	78fb      	ldrb	r3, [r7, #3]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d002      	beq.n	8000434 <LCD_8bit_Set_Cursor+0x34>
 800042e:	2b02      	cmp	r3, #2
 8000430:	d00e      	beq.n	8000450 <LCD_8bit_Set_Cursor+0x50>
				LCD_8bit_Command(LCD, _LCD_ROW2_START + --column);
				AddressDD = 16 + column;
				break;
			}
	}
}
 8000432:	e01d      	b.n	8000470 <LCD_8bit_Set_Cursor+0x70>
				LCD_8bit_Command(LCD, _LCD_ROW1_START + --column);
 8000434:	78bb      	ldrb	r3, [r7, #2]
 8000436:	3b01      	subs	r3, #1
 8000438:	70bb      	strb	r3, [r7, #2]
 800043a:	78bb      	ldrb	r3, [r7, #2]
 800043c:	3b80      	subs	r3, #128	; 0x80
 800043e:	b2db      	uxtb	r3, r3
 8000440:	4619      	mov	r1, r3
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f000 f81a 	bl	800047c <LCD_8bit_Command>
				AddressDD = 0 + column;
 8000448:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <LCD_8bit_Set_Cursor+0x78>)
 800044a:	78bb      	ldrb	r3, [r7, #2]
 800044c:	7013      	strb	r3, [r2, #0]
				break;
 800044e:	e00f      	b.n	8000470 <LCD_8bit_Set_Cursor+0x70>
				LCD_8bit_Command(LCD, _LCD_ROW2_START + --column);
 8000450:	78bb      	ldrb	r3, [r7, #2]
 8000452:	3b01      	subs	r3, #1
 8000454:	70bb      	strb	r3, [r7, #2]
 8000456:	78bb      	ldrb	r3, [r7, #2]
 8000458:	3b40      	subs	r3, #64	; 0x40
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4619      	mov	r1, r3
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f000 f80c 	bl	800047c <LCD_8bit_Command>
				AddressDD = 16 + column;
 8000464:	78bb      	ldrb	r3, [r7, #2]
 8000466:	3310      	adds	r3, #16
 8000468:	b2da      	uxtb	r2, r3
 800046a:	4b03      	ldr	r3, [pc, #12]	; (8000478 <LCD_8bit_Set_Cursor+0x78>)
 800046c:	701a      	strb	r2, [r3, #0]
				break;
 800046e:	bf00      	nop
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000090 	.word	0x20000090

0800047c <LCD_8bit_Command>:
void LCD_8bit_Command(LCD_8bit_t *LCD, uint8_t command)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	460b      	mov	r3, r1
 8000486:	70fb      	strb	r3, [r7, #3]
	// To Tell LCD That i will send command Write RS LOW @ref INFO (LCD.H)
	GPIO_WRITE_PIN(&(LCD->RS), LOW);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f000 f9cd 	bl	800082c <GPIO_WRITE_PIN>
	// Send 8bits Command on Wires Bit by Bit
	Send_8bit(LCD, command);
 8000492:	78fb      	ldrb	r3, [r7, #3]
 8000494:	4619      	mov	r1, r3
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f000 f86a 	bl	8000570 <Send_8bit>
}
 800049c:	bf00      	nop
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <LCD_8bit_Print_Char>:

void LCD_8bit_Print_Char(LCD_8bit_t *LCD, uint8_t data){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	460b      	mov	r3, r1
 80004ae:	70fb      	strb	r3, [r7, #3]

	if (AddressDD == 16) 	LCD_8bit_Set_Cursor(LCD, 2, 1);
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <LCD_8bit_Print_Char+0x60>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b10      	cmp	r3, #16
 80004b6:	d105      	bne.n	80004c4 <LCD_8bit_Print_Char+0x20>
 80004b8:	2201      	movs	r2, #1
 80004ba:	2102      	movs	r1, #2
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f7ff ff9f 	bl	8000400 <LCD_8bit_Set_Cursor>
 80004c2:	e00b      	b.n	80004dc <LCD_8bit_Print_Char+0x38>
	else if (AddressDD == 32)
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <LCD_8bit_Print_Char+0x60>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b20      	cmp	r3, #32
 80004ca:	d107      	bne.n	80004dc <LCD_8bit_Print_Char+0x38>
	{
		LCD_8bit_Set_Cursor(LCD, 1, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2101      	movs	r1, #1
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f7ff ff95 	bl	8000400 <LCD_8bit_Set_Cursor>
		AddressDD = 0;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <LCD_8bit_Print_Char+0x60>)
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
	}
	AddressDD++;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <LCD_8bit_Print_Char+0x60>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <LCD_8bit_Print_Char+0x60>)
 80004e6:	701a      	strb	r2, [r3, #0]
	// To Tell LCD That i will send Data Write RS HIGH @ref INFO (LCD.H)
	GPIO_WRITE_PIN(&(LCD->RS), HIGH);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2101      	movs	r1, #1
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 f99d 	bl	800082c <GPIO_WRITE_PIN>
	// Send 8bits data on Wires Bit by Bit
	Send_8bit(LCD, data);
 80004f2:	78fb      	ldrb	r3, [r7, #3]
 80004f4:	4619      	mov	r1, r3
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f000 f83a 	bl	8000570 <Send_8bit>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000090 	.word	0x20000090

08000508 <LCD_8bit_Print>:

void LCD_8bit_Print(LCD_8bit_t *LCD, uint8_t *data){
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	while(*data) LCD_8bit_Print_Char(LCD, *data++);
 8000512:	e007      	b.n	8000524 <LCD_8bit_Print+0x1c>
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	603a      	str	r2, [r7, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f7ff ffc0 	bl	80004a4 <LCD_8bit_Print_Char>
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d1f3      	bne.n	8000514 <LCD_8bit_Print+0xc>
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <LCD_8bit_Print_Number>:

void LCD_8bit_Print_Number(LCD_8bit_t *LCD, int value)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	uint8_t str[10] = {0};
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	811a      	strh	r2, [r3, #8]
	sprintf(str,"%i",value);
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	683a      	ldr	r2, [r7, #0]
 8000550:	4906      	ldr	r1, [pc, #24]	; (800056c <LCD_8bit_Print_Number+0x38>)
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fb60 	bl	8000c18 <siprintf>
	LCD_8bit_Print(LCD, str);
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	4619      	mov	r1, r3
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f7ff ffd2 	bl	8000508 <LCD_8bit_Print>
}
 8000564:	bf00      	nop
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	08001454 	.word	0x08001454

08000570 <Send_8bit>:
	Send_8bit(LCD, data);
}


static void Send_8bit(LCD_8bit_t *LCD, uint8_t _data_command)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]
	// Send 8bits data | command bit by bit
	for (char i = 0; i < 8; i++)
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	e012      	b.n	80005a8 <Send_8bit+0x38>
	{
		GPIO_WRITE_PIN( &(LCD->Data[(int)i]), ((_data_command >> (int)i) & 0x01) );
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	3302      	adds	r3, #2
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	18d0      	adds	r0, r2, r3
 800058c:	78fa      	ldrb	r2, [r7, #3]
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	fa42 f303 	asr.w	r3, r2, r3
 8000594:	b2db      	uxtb	r3, r3
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	b2db      	uxtb	r3, r3
 800059c:	4619      	mov	r1, r3
 800059e:	f000 f945 	bl	800082c <GPIO_WRITE_PIN>
	for (char i = 0; i < 8; i++)
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	3301      	adds	r3, #1
 80005a6:	73fb      	strb	r3, [r7, #15]
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	2b07      	cmp	r3, #7
 80005ac:	d9e9      	bls.n	8000582 <Send_8bit+0x12>
	}

	// Enable Signal to Recieve Data or Command  |_ Falling Edge
	GPIO_WRITE_PIN(&(LCD->EN), HIGH);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	3308      	adds	r3, #8
 80005b2:	2101      	movs	r1, #1
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f939 	bl	800082c <GPIO_WRITE_PIN>
	for(volatile char delay = 0; delay < 255; delay++);  //Small delay i will write professional delay after learning it
 80005ba:	2300      	movs	r3, #0
 80005bc:	73bb      	strb	r3, [r7, #14]
 80005be:	e004      	b.n	80005ca <Send_8bit+0x5a>
 80005c0:	7bbb      	ldrb	r3, [r7, #14]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	3301      	adds	r3, #1
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	73bb      	strb	r3, [r7, #14]
 80005ca:	7bbb      	ldrb	r3, [r7, #14]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2bff      	cmp	r3, #255	; 0xff
 80005d0:	d1f6      	bne.n	80005c0 <Send_8bit+0x50>
	GPIO_WRITE_PIN(&(LCD->EN), LOW);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3308      	adds	r3, #8
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f927 	bl	800082c <GPIO_WRITE_PIN>
	for(volatile char delay = 0; delay < 255; delay++);
 80005de:	2300      	movs	r3, #0
 80005e0:	737b      	strb	r3, [r7, #13]
 80005e2:	e004      	b.n	80005ee <Send_8bit+0x7e>
 80005e4:	7b7b      	ldrb	r3, [r7, #13]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	3301      	adds	r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	737b      	strb	r3, [r7, #13]
 80005ee:	7b7b      	ldrb	r3, [r7, #13]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2bff      	cmp	r3, #255	; 0xff
 80005f4:	d1f6      	bne.n	80005e4 <Send_8bit+0x74>
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <myWait>:
}

#endif

static void myWait(volatile int ms)
{
 80005fe:	b480      	push	{r7}
 8000600:	b085      	sub	sp, #20
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
	for (volatile int i = 0; i < ms; i++) for (volatile int j = 0; j < 255; j++);
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	e00b      	b.n	8000624 <myWait+0x26>
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	e002      	b.n	8000618 <myWait+0x1a>
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	3301      	adds	r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	2bfe      	cmp	r3, #254	; 0xfe
 800061c:	ddf9      	ble.n	8000612 <myWait+0x14>
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	3301      	adds	r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	429a      	cmp	r2, r3
 800062a:	dbef      	blt.n	800060c <myWait+0xe>

}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <GetPos>:
							/*************************************/
							/*       Function Definition         */
							/*************************************/

uint8_t GetPos(PINy_t PinNumber)
{
 8000636:	b480      	push	{r7}
 8000638:	b083      	sub	sp, #12
 800063a:	af00      	add	r7, sp, #0
 800063c:	4603      	mov	r3, r0
 800063e:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000640:	88fb      	ldrh	r3, [r7, #6]
 8000642:	2b80      	cmp	r3, #128	; 0x80
 8000644:	d042      	beq.n	80006cc <GetPos+0x96>
 8000646:	2b80      	cmp	r3, #128	; 0x80
 8000648:	dc11      	bgt.n	800066e <GetPos+0x38>
 800064a:	2b08      	cmp	r3, #8
 800064c:	d036      	beq.n	80006bc <GetPos+0x86>
 800064e:	2b08      	cmp	r3, #8
 8000650:	dc06      	bgt.n	8000660 <GetPos+0x2a>
 8000652:	2b02      	cmp	r3, #2
 8000654:	d02e      	beq.n	80006b4 <GetPos+0x7e>
 8000656:	2b04      	cmp	r3, #4
 8000658:	d02e      	beq.n	80006b8 <GetPos+0x82>
 800065a:	2b01      	cmp	r3, #1
 800065c:	d028      	beq.n	80006b0 <GetPos+0x7a>
 800065e:	e047      	b.n	80006f0 <GetPos+0xba>
 8000660:	2b20      	cmp	r3, #32
 8000662:	d02f      	beq.n	80006c4 <GetPos+0x8e>
 8000664:	2b40      	cmp	r3, #64	; 0x40
 8000666:	d02f      	beq.n	80006c8 <GetPos+0x92>
 8000668:	2b10      	cmp	r3, #16
 800066a:	d029      	beq.n	80006c0 <GetPos+0x8a>
 800066c:	e040      	b.n	80006f0 <GetPos+0xba>
 800066e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000672:	d033      	beq.n	80006dc <GetPos+0xa6>
 8000674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000678:	dc09      	bgt.n	800068e <GetPos+0x58>
 800067a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800067e:	d029      	beq.n	80006d4 <GetPos+0x9e>
 8000680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000684:	d028      	beq.n	80006d8 <GetPos+0xa2>
 8000686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800068a:	d021      	beq.n	80006d0 <GetPos+0x9a>
 800068c:	e030      	b.n	80006f0 <GetPos+0xba>
 800068e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000692:	d027      	beq.n	80006e4 <GetPos+0xae>
 8000694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000698:	dc03      	bgt.n	80006a2 <GetPos+0x6c>
 800069a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800069e:	d01f      	beq.n	80006e0 <GetPos+0xaa>
 80006a0:	e026      	b.n	80006f0 <GetPos+0xba>
 80006a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80006a6:	d01f      	beq.n	80006e8 <GetPos+0xb2>
 80006a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006ac:	d01e      	beq.n	80006ec <GetPos+0xb6>
 80006ae:	e01f      	b.n	80006f0 <GetPos+0xba>
	{
	case GPIO_PIN0:
		return 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	e01e      	b.n	80006f2 <GetPos+0xbc>
		break;
	case GPIO_PIN1:
		return 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	e01c      	b.n	80006f2 <GetPos+0xbc>
		break;
	case GPIO_PIN2:
		return 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	e01a      	b.n	80006f2 <GetPos+0xbc>
		break;
	case GPIO_PIN3:
		return 12;
 80006bc:	230c      	movs	r3, #12
 80006be:	e018      	b.n	80006f2 <GetPos+0xbc>
		break;
	case GPIO_PIN4:
		return 16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	e016      	b.n	80006f2 <GetPos+0xbc>
		break;
	case GPIO_PIN5:
		return 20;
 80006c4:	2314      	movs	r3, #20
 80006c6:	e014      	b.n	80006f2 <GetPos+0xbc>
		break;
	case GPIO_PIN6:
		return 24;
 80006c8:	2318      	movs	r3, #24
 80006ca:	e012      	b.n	80006f2 <GetPos+0xbc>
		break;
	case GPIO_PIN7:
		return 28;
 80006cc:	231c      	movs	r3, #28
 80006ce:	e010      	b.n	80006f2 <GetPos+0xbc>
		break;
	case GPIO_PIN8:
		return 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	e00e      	b.n	80006f2 <GetPos+0xbc>
		break;
	case GPIO_PIN9:
		return 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	e00c      	b.n	80006f2 <GetPos+0xbc>
		break;
	case GPIO_PIN10:
		return 8;
 80006d8:	2308      	movs	r3, #8
 80006da:	e00a      	b.n	80006f2 <GetPos+0xbc>
		break;
	case GPIO_PIN11:
		return 12;
 80006dc:	230c      	movs	r3, #12
 80006de:	e008      	b.n	80006f2 <GetPos+0xbc>
		break;
	case GPIO_PIN12:
		return 16;
 80006e0:	2310      	movs	r3, #16
 80006e2:	e006      	b.n	80006f2 <GetPos+0xbc>
		break;
	case GPIO_PIN13:
		return 20;
 80006e4:	2314      	movs	r3, #20
 80006e6:	e004      	b.n	80006f2 <GetPos+0xbc>
		break;
	case GPIO_PIN14:
		return 24;
 80006e8:	2318      	movs	r3, #24
 80006ea:	e002      	b.n	80006f2 <GetPos+0xbc>
		break;
	case GPIO_PIN15:
		return 28;
 80006ec:	231c      	movs	r3, #28
 80006ee:	e000      	b.n	80006f2 <GetPos+0xbc>
		break;
	default :
		return 0;
 80006f0:	2300      	movs	r3, #0
		break;
	}
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <GPIO_INIT>:

void GPIO_INIT(GPIO_PinConfig_t *myPin)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	volatile uint32_t *configReg = NULL;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config = 0x0;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]
	configReg = (myPin->GPIO_PinNumber < GPIO_PIN8) ? (&(myPin->GPIOx->CRL)) : (&(myPin->GPIOx->CRH));
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	889b      	ldrh	r3, [r3, #4]
 8000710:	2bff      	cmp	r3, #255	; 0xff
 8000712:	d802      	bhi.n	800071a <GPIO_INIT+0x1e>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	e002      	b.n	8000720 <GPIO_INIT+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3304      	adds	r3, #4
 8000720:	60bb      	str	r3, [r7, #8]
	// Clear CNF0[1:0] MODE0[1:0]
	(*configReg) &= ~(0xF << GetPos(myPin->GPIO_PinNumber));
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	889b      	ldrh	r3, [r3, #4]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff85 	bl	8000636 <GetPos>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	230f      	movs	r3, #15
 8000732:	4093      	lsls	r3, r2
 8000734:	43da      	mvns	r2, r3
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	401a      	ands	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	601a      	str	r2, [r3, #0]

	if ( (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	799b      	ldrb	r3, [r3, #6]
 8000744:	2b07      	cmp	r3, #7
 8000746:	d00b      	beq.n	8000760 <GPIO_INIT+0x64>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	799b      	ldrb	r3, [r3, #6]
 800074c:	2b06      	cmp	r3, #6
 800074e:	d007      	beq.n	8000760 <GPIO_INIT+0x64>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	799b      	ldrb	r3, [r3, #6]
 8000754:	2b05      	cmp	r3, #5
 8000756:	d003      	beq.n	8000760 <GPIO_INIT+0x64>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	799b      	ldrb	r3, [r3, #6]
 800075c:	2b04      	cmp	r3, #4
 800075e:	d10e      	bne.n	800077e <GPIO_INIT+0x82>
	{
		// Set CNF0[1:0] -> (his mode)  MODE0[1:0] -> 00
		Pin_Config = ((((myPin->GPIO_MODE - 4) << 2) | (myPin->GPIO_OUTPUT_Speed)) & 0x0F);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	799b      	ldrb	r3, [r3, #6]
 8000764:	3b04      	subs	r3, #4
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	b25a      	sxtb	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	79db      	ldrb	r3, [r3, #7]
 800076e:	b25b      	sxtb	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	b25b      	sxtb	r3, r3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	f003 030f 	and.w	r3, r3, #15
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	e030      	b.n	80007e0 <GPIO_INIT+0xe4>
	}
	else
	{
		if (myPin->GPIO_MODE == GPIO_MODE_INPUT_AF) // Considered input Floating
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	799b      	ldrb	r3, [r3, #6]
 8000782:	2b08      	cmp	r3, #8
 8000784:	d102      	bne.n	800078c <GPIO_INIT+0x90>
		{
			Pin_Config = ((GPIO_MODE_INPUT_FLO << 2 | 0x0) & 0x0F);
 8000786:	2304      	movs	r3, #4
 8000788:	73fb      	strb	r3, [r7, #15]
 800078a:	e029      	b.n	80007e0 <GPIO_INIT+0xe4>
		}
		else if (myPin->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	799b      	ldrb	r3, [r3, #6]
 8000790:	2b02      	cmp	r3, #2
 8000792:	d10c      	bne.n	80007ae <GPIO_INIT+0xb2>
		{
			Pin_Config = ((GPIO_MODE_INPUT_PU << 2 | 0x0) & 0x0F);
 8000794:	2308      	movs	r3, #8
 8000796:	73fb      	strb	r3, [r7, #15]
			//From Table 20. Port bit configuration table-> Set ODR->1 to set pin as Input Pull Up
			myPin->GPIOx->ODR |= (myPin->GPIO_PinNumber);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68da      	ldr	r2, [r3, #12]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	889b      	ldrh	r3, [r3, #4]
 80007a2:	4619      	mov	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	430a      	orrs	r2, r1
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	e018      	b.n	80007e0 <GPIO_INIT+0xe4>
		}
		else if (myPin->GPIO_MODE == GPIO_MODE_INPUT_PD)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	799b      	ldrb	r3, [r3, #6]
 80007b2:	2b03      	cmp	r3, #3
 80007b4:	d10d      	bne.n	80007d2 <GPIO_INIT+0xd6>
		{
			Pin_Config = ((GPIO_MODE_INPUT_PU << 2) & 0x0F);
 80007b6:	2308      	movs	r3, #8
 80007b8:	73fb      	strb	r3, [r7, #15]
			//From Table 20. Port bit configuration table-> Set ODR->0 to set pin as Input Pull Down
			myPin->GPIOx->ODR &= ~(myPin->GPIO_PinNumber);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	68da      	ldr	r2, [r3, #12]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	889b      	ldrh	r3, [r3, #4]
 80007c4:	43db      	mvns	r3, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	400a      	ands	r2, r1
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	e006      	b.n	80007e0 <GPIO_INIT+0xe4>
		}
		else
		{
			Pin_Config = ((myPin->GPIO_MODE << 2 | 0x0) & 0x0F);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	799b      	ldrb	r3, [r3, #6]
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	f003 030f 	and.w	r3, r3, #15
 80007de:	73fb      	strb	r3, [r7, #15]
		}
	}
	// Writing on CRL OR CRH Reg
	(*configReg) |= ((Pin_Config) << GetPos(myPin->GPIO_PinNumber));
 80007e0:	7bfc      	ldrb	r4, [r7, #15]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	889b      	ldrh	r3, [r3, #4]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff25 	bl	8000636 <GetPos>
 80007ec:	4603      	mov	r3, r0
 80007ee:	fa04 f203 	lsl.w	r2, r4, r3
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	431a      	orrs	r2, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	601a      	str	r2, [r3, #0]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	bd90      	pop	{r4, r7, pc}

08000804 <GPIO_READ_PIN>:

uint8_t GPIO_READ_PIN(GPIO_PinConfig_t *myPin)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if (myPin->GPIOx->IDR & myPin->GPIO_PinNumber) return 1;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	8892      	ldrh	r2, [r2, #4]
 8000816:	4013      	ands	r3, r2
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <GPIO_READ_PIN+0x1c>
 800081c:	2301      	movs	r3, #1
 800081e:	e000      	b.n	8000822 <GPIO_READ_PIN+0x1e>
	return 0;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <GPIO_WRITE_PIN>:
{
	return ((uint16_t)GPIOx->IDR);
}

void GPIO_WRITE_PIN(GPIO_PinConfig_t *myPin, Logic_t Mode)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	70fb      	strb	r3, [r7, #3]
	if (Mode) myPin->GPIOx->ODR |= (myPin->GPIO_PinNumber);
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00a      	beq.n	8000854 <GPIO_WRITE_PIN+0x28>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	68da      	ldr	r2, [r3, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	889b      	ldrh	r3, [r3, #4]
 8000848:	4619      	mov	r1, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	430a      	orrs	r2, r1
 8000850:	60da      	str	r2, [r3, #12]
	else      myPin->GPIOx->ODR &= ~(myPin->GPIO_PinNumber);
}
 8000852:	e00a      	b.n	800086a <GPIO_WRITE_PIN+0x3e>
	else      myPin->GPIOx->ODR &= ~(myPin->GPIO_PinNumber);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	68da      	ldr	r2, [r3, #12]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	889b      	ldrh	r3, [r3, #4]
 800085e:	43db      	mvns	r3, r3
 8000860:	4619      	mov	r1, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	400a      	ands	r2, r1
 8000868:	60da      	str	r2, [r3, #12]
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <GPIO_TOGGLE_PIN>:
{
	GPIOx->ODR = value;
}

void GPIO_TOGGLE_PIN(GPIO_PinConfig_t *myPin)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	myPin->GPIOx->ODR ^= (myPin->GPIO_PinNumber);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	68da      	ldr	r2, [r3, #12]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	889b      	ldrh	r3, [r3, #4]
 8000886:	4619      	mov	r1, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	404a      	eors	r2, r1
 800088e:	60da      	str	r2, [r3, #12]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <myWait>:

GPIO_PinConfig_t LED;


static void myWait(volatile int ms)
{
 800089a:	b480      	push	{r7}
 800089c:	b085      	sub	sp, #20
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
	for (volatile int i = 0; i < ms; i++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	e00b      	b.n	80008c0 <myWait+0x26>
	{
		for (volatile int j = 0; j < 255; j++);
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	e002      	b.n	80008b4 <myWait+0x1a>
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	3301      	adds	r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	2bfe      	cmp	r3, #254	; 0xfe
 80008b8:	ddf9      	ble.n	80008ae <myWait+0x14>
	for (volatile int i = 0; i < ms; i++)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	3301      	adds	r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	dbef      	blt.n	80008a8 <myWait+0xe>
	}
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
	...

080008d4 <GPIO_test>:

void GPIO_test()
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
		LED.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <GPIO_test+0x3c>)
 80008da:	2204      	movs	r2, #4
 80008dc:	719a      	strb	r2, [r3, #6]
		LED.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <GPIO_test+0x3c>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	71da      	strb	r2, [r3, #7]
		LED.GPIO_PinNumber = GPIO_PIN0;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <GPIO_test+0x3c>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	809a      	strh	r2, [r3, #4]
		LED.GPIOx = GPIOA;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <GPIO_test+0x3c>)
 80008ec:	4a09      	ldr	r2, [pc, #36]	; (8000914 <GPIO_test+0x40>)
 80008ee:	601a      	str	r2, [r3, #0]

		GPIO_INIT(&LED);
 80008f0:	4807      	ldr	r0, [pc, #28]	; (8000910 <GPIO_test+0x3c>)
 80008f2:	f7ff ff03 	bl	80006fc <GPIO_INIT>
		GPIO_WRITE_PIN(&LED, HIGH);
 80008f6:	2101      	movs	r1, #1
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <GPIO_test+0x3c>)
 80008fa:	f7ff ff97 	bl	800082c <GPIO_WRITE_PIN>
		myWait(20);
 80008fe:	2014      	movs	r0, #20
 8000900:	f7ff ffcb 	bl	800089a <myWait>
		GPIO_WRITE_PIN(&LED, HIGH);
 8000904:	2101      	movs	r1, #1
 8000906:	4802      	ldr	r0, [pc, #8]	; (8000910 <GPIO_test+0x3c>)
 8000908:	f7ff ff90 	bl	800082c <GPIO_WRITE_PIN>

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000e0 	.word	0x200000e0
 8000914:	40010800 	.word	0x40010800

08000918 <KEY_init>:
	lcd1.Data[3].GPIOx = GPIOA;
	lcd1.Data[3].GPIO_PinNumber = GPIO_PIN8;

}*/

void KEY_init(){
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
	key1.ROW[0].GPIO_PinNumber = GPIO_PIN11;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <KEY_init+0x70>)
 800091e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000922:	809a      	strh	r2, [r3, #4]
	key1.ROW[0].GPIOx = GPIOB;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <KEY_init+0x70>)
 8000926:	4a19      	ldr	r2, [pc, #100]	; (800098c <KEY_init+0x74>)
 8000928:	601a      	str	r2, [r3, #0]

	key1.ROW[1].GPIO_PinNumber = GPIO_PIN10;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <KEY_init+0x70>)
 800092c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000930:	819a      	strh	r2, [r3, #12]
	key1.ROW[1].GPIOx = GPIOB;
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <KEY_init+0x70>)
 8000934:	4a15      	ldr	r2, [pc, #84]	; (800098c <KEY_init+0x74>)
 8000936:	609a      	str	r2, [r3, #8]

	key1.ROW[2].GPIO_PinNumber = GPIO_PIN1;
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <KEY_init+0x70>)
 800093a:	2202      	movs	r2, #2
 800093c:	829a      	strh	r2, [r3, #20]
	key1.ROW[2].GPIOx = GPIOB;
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <KEY_init+0x70>)
 8000940:	4a12      	ldr	r2, [pc, #72]	; (800098c <KEY_init+0x74>)
 8000942:	611a      	str	r2, [r3, #16]

	key1.ROW[3].GPIO_PinNumber = GPIO_PIN0;
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <KEY_init+0x70>)
 8000946:	2201      	movs	r2, #1
 8000948:	839a      	strh	r2, [r3, #28]
	key1.ROW[3].GPIOx = GPIOB;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <KEY_init+0x70>)
 800094c:	4a0f      	ldr	r2, [pc, #60]	; (800098c <KEY_init+0x74>)
 800094e:	619a      	str	r2, [r3, #24]

	key1.COL[0].GPIO_PinNumber = GPIO_PIN7;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <KEY_init+0x70>)
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	849a      	strh	r2, [r3, #36]	; 0x24
	key1.COL[0].GPIOx = GPIOA;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <KEY_init+0x70>)
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <KEY_init+0x78>)
 800095a:	621a      	str	r2, [r3, #32]

	key1.COL[1].GPIO_PinNumber = GPIO_PIN6;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <KEY_init+0x70>)
 800095e:	2240      	movs	r2, #64	; 0x40
 8000960:	859a      	strh	r2, [r3, #44]	; 0x2c
	key1.COL[1].GPIOx = GPIOA;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <KEY_init+0x70>)
 8000964:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <KEY_init+0x78>)
 8000966:	629a      	str	r2, [r3, #40]	; 0x28

	key1.COL[2].GPIO_PinNumber = GPIO_PIN5;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <KEY_init+0x70>)
 800096a:	2220      	movs	r2, #32
 800096c:	869a      	strh	r2, [r3, #52]	; 0x34
	key1.COL[2].GPIOx = GPIOA;
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <KEY_init+0x70>)
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <KEY_init+0x78>)
 8000972:	631a      	str	r2, [r3, #48]	; 0x30

	key1.COL[3].GPIO_PinNumber = GPIO_PIN4;
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <KEY_init+0x70>)
 8000976:	2210      	movs	r2, #16
 8000978:	879a      	strh	r2, [r3, #60]	; 0x3c
	key1.COL[3].GPIOx = GPIOA;
 800097a:	4b03      	ldr	r3, [pc, #12]	; (8000988 <KEY_init+0x70>)
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <KEY_init+0x78>)
 800097e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	200000a0 	.word	0x200000a0
 800098c:	40010c00 	.word	0x40010c00
 8000990:	40010800 	.word	0x40010800

08000994 <LCD_init>:

void LCD_init()
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	lcd2.RS.GPIOx = GPIOB;
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <LCD_init+0x94>)
 800099a:	4a24      	ldr	r2, [pc, #144]	; (8000a2c <LCD_init+0x98>)
 800099c:	601a      	str	r2, [r3, #0]
	lcd2.RS.GPIO_PinNumber = GPIO_PIN6;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <LCD_init+0x94>)
 80009a0:	2240      	movs	r2, #64	; 0x40
 80009a2:	809a      	strh	r2, [r3, #4]

	lcd2.EN.GPIOx = GPIOB;
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <LCD_init+0x94>)
 80009a6:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <LCD_init+0x98>)
 80009a8:	609a      	str	r2, [r3, #8]
	lcd2.EN.GPIO_PinNumber = GPIO_PIN5;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <LCD_init+0x94>)
 80009ac:	2220      	movs	r2, #32
 80009ae:	819a      	strh	r2, [r3, #12]

	lcd2.Data[0].GPIOx = GPIOB;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <LCD_init+0x94>)
 80009b2:	4a1e      	ldr	r2, [pc, #120]	; (8000a2c <LCD_init+0x98>)
 80009b4:	611a      	str	r2, [r3, #16]
	lcd2.Data[0].GPIO_PinNumber = GPIO_PIN4;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <LCD_init+0x94>)
 80009b8:	2210      	movs	r2, #16
 80009ba:	829a      	strh	r2, [r3, #20]

	lcd2.Data[1].GPIOx = GPIOB;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <LCD_init+0x94>)
 80009be:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <LCD_init+0x98>)
 80009c0:	619a      	str	r2, [r3, #24]
	lcd2.Data[1].GPIO_PinNumber = GPIO_PIN3;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <LCD_init+0x94>)
 80009c4:	2208      	movs	r2, #8
 80009c6:	839a      	strh	r2, [r3, #28]

	lcd2.Data[2].GPIOx = GPIOA;
 80009c8:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <LCD_init+0x94>)
 80009ca:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <LCD_init+0x9c>)
 80009cc:	621a      	str	r2, [r3, #32]
	lcd2.Data[2].GPIO_PinNumber = GPIO_PIN15;
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <LCD_init+0x94>)
 80009d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009d4:	849a      	strh	r2, [r3, #36]	; 0x24

	lcd2.Data[3].GPIOx = GPIOA;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <LCD_init+0x94>)
 80009d8:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <LCD_init+0x9c>)
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
	lcd2.Data[3].GPIO_PinNumber = GPIO_PIN12;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <LCD_init+0x94>)
 80009de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e2:	859a      	strh	r2, [r3, #44]	; 0x2c

	lcd2.Data[4].GPIOx = GPIOA;
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <LCD_init+0x94>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <LCD_init+0x9c>)
 80009e8:	631a      	str	r2, [r3, #48]	; 0x30
	lcd2.Data[4].GPIO_PinNumber = GPIO_PIN11;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <LCD_init+0x94>)
 80009ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009f0:	869a      	strh	r2, [r3, #52]	; 0x34

	lcd2.Data[5].GPIOx = GPIOA;
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <LCD_init+0x94>)
 80009f4:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <LCD_init+0x9c>)
 80009f6:	639a      	str	r2, [r3, #56]	; 0x38
	lcd2.Data[5].GPIO_PinNumber = GPIO_PIN10;
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <LCD_init+0x94>)
 80009fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fe:	879a      	strh	r2, [r3, #60]	; 0x3c

	lcd2.Data[6].GPIOx = GPIOA;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <LCD_init+0x94>)
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <LCD_init+0x9c>)
 8000a04:	641a      	str	r2, [r3, #64]	; 0x40
	lcd2.Data[6].GPIO_PinNumber = GPIO_PIN9;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <LCD_init+0x94>)
 8000a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	lcd2.Data[7].GPIOx = GPIOA;
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <LCD_init+0x94>)
 8000a12:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <LCD_init+0x9c>)
 8000a14:	649a      	str	r2, [r3, #72]	; 0x48
	lcd2.Data[7].GPIO_PinNumber = GPIO_PIN8;
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <LCD_init+0x94>)
 8000a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	200000e8 	.word	0x200000e8
 8000a2c:	40010c00 	.word	0x40010c00
 8000a30:	40010800 	.word	0x40010800

08000a34 <clock_init>:

void clock_init()
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
	// Enable CLK FOR GPIO B
	RCC_GPIOB_CLK_EN;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <clock_init+0x24>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <clock_init+0x24>)
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	6193      	str	r3, [r2, #24]

	// Enable CLK FOR GPIO A
	RCC_GPIOA_CLK_EN;
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <clock_init+0x24>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <clock_init+0x24>)
 8000a4a:	f043 0304 	orr.w	r3, r3, #4
 8000a4e:	6193      	str	r3, [r2, #24]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40021000 	.word	0x40021000

08000a5c <main>:


int main(void)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
	clock_init();
 8000a62:	f7ff ffe7 	bl	8000a34 <clock_init>
	LCD_init();
 8000a66:	f7ff ff95 	bl	8000994 <LCD_init>
	KEY_init();
 8000a6a:	f7ff ff55 	bl	8000918 <KEY_init>
	const uint8_t Char[KEYPAD_ROW_][KEYPAD_COL_] = {{'7', '8', '9', '/'},
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <main+0x90>)
 8000a70:	f107 040c 	add.w	r4, r7, #12
 8000a74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
													{'4', '5', '6', '*'},
													{'1', '2', '3', '-'},
													{'#', '0', '=', '+'}};
	Key_Init(&key1, Char);
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481b      	ldr	r0, [pc, #108]	; (8000af0 <main+0x94>)
 8000a82:	f7ff fb75 	bl	8000170 <Key_Init>
	LCD_8bit_init(&lcd2);
 8000a86:	481b      	ldr	r0, [pc, #108]	; (8000af4 <main+0x98>)
 8000a88:	f7ff fc40 	bl	800030c <LCD_8bit_init>
	GPIO_test();
 8000a8c:	f7ff ff22 	bl	80008d4 <GPIO_test>

	uint8_t Character[8] ={ 0b00000, 0b00000, 0b01010, 0b11111, 0b11111, 0b01110, 0b00100, 0b00000 };
 8000a90:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <main+0x9c>)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a98:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_8bit_Print(&lcd2, (uint8_t *)"Hello World!");
 8000a9c:	4917      	ldr	r1, [pc, #92]	; (8000afc <main+0xa0>)
 8000a9e:	4815      	ldr	r0, [pc, #84]	; (8000af4 <main+0x98>)
 8000aa0:	f7ff fd32 	bl	8000508 <LCD_8bit_Print>

//	myWait(1000);
//	LCD_8bit_Display_OFF(&lcd2);
//	myWait(1000);
//	LCD_8bit_Display_ON(&lcd2);
	LCD_8bit_Set_Cursor(&lcd2, 2, 10);
 8000aa4:	220a      	movs	r2, #10
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	4812      	ldr	r0, [pc, #72]	; (8000af4 <main+0x98>)
 8000aaa:	f7ff fca9 	bl	8000400 <LCD_8bit_Set_Cursor>
	char x = 5;
 8000aae:	2305      	movs	r3, #5
 8000ab0:	77fb      	strb	r3, [r7, #31]
	while(1)
	{

		uint8_t press = Key_get(&key1);
 8000ab2:	480f      	ldr	r0, [pc, #60]	; (8000af0 <main+0x94>)
 8000ab4:	f7ff fbcc 	bl	8000250 <Key_get>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	77bb      	strb	r3, [r7, #30]
		if (press != ' ')
 8000abc:	7fbb      	ldrb	r3, [r7, #30]
 8000abe:	2b20      	cmp	r3, #32
 8000ac0:	d004      	beq.n	8000acc <main+0x70>
		{
			LCD_8bit_Print_Char(&lcd2, press);
 8000ac2:	7fbb      	ldrb	r3, [r7, #30]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480b      	ldr	r0, [pc, #44]	; (8000af4 <main+0x98>)
 8000ac8:	f7ff fcec 	bl	80004a4 <LCD_8bit_Print_Char>
		}
		LCD_8bit_Set_Cursor(&lcd2, 2, 14);
 8000acc:	220e      	movs	r2, #14
 8000ace:	2102      	movs	r1, #2
 8000ad0:	4808      	ldr	r0, [pc, #32]	; (8000af4 <main+0x98>)
 8000ad2:	f7ff fc95 	bl	8000400 <LCD_8bit_Set_Cursor>

		LCD_8bit_Print_Number(&lcd2, 6.5);
 8000ad6:	2106      	movs	r1, #6
 8000ad8:	4806      	ldr	r0, [pc, #24]	; (8000af4 <main+0x98>)
 8000ada:	f7ff fd2b 	bl	8000534 <LCD_8bit_Print_Number>

		GPIO_TOGGLE_PIN(&LED);
 8000ade:	4808      	ldr	r0, [pc, #32]	; (8000b00 <main+0xa4>)
 8000ae0:	f7ff fec8 	bl	8000874 <GPIO_TOGGLE_PIN>
		myWait(10);
 8000ae4:	200a      	movs	r0, #10
 8000ae6:	f7ff fed8 	bl	800089a <myWait>
	{
 8000aea:	e7e2      	b.n	8000ab2 <main+0x56>
 8000aec:	08001468 	.word	0x08001468
 8000af0:	200000a0 	.word	0x200000a0
 8000af4:	200000e8 	.word	0x200000e8
 8000af8:	08001478 	.word	0x08001478
 8000afc:	08001458 	.word	0x08001458
 8000b00:	200000e0 	.word	0x200000e0

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d207      	bcs.n	8000b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b34:	f000 f846 	bl	8000bc4 <__errno>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <_sbrk+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20002800 	.word	0x20002800
 8000b64:	00000400 	.word	0x00000400
 8000b68:	20000094 	.word	0x20000094
 8000b6c:	20000140 	.word	0x20000140

08000b70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b72:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b74:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b78:	480c      	ldr	r0, [pc, #48]	; (8000bac <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7a:	490d      	ldr	r1, [pc, #52]	; (8000bb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <LoopForever+0xe>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b90:	4c0a      	ldr	r4, [pc, #40]	; (8000bbc <LoopForever+0x16>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b9e:	f000 f817 	bl	8000bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba2:	f7ff ff5b 	bl	8000a5c <main>

08000ba6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba6:	e7fe      	b.n	8000ba6 <LoopForever>
  ldr   r0, =_estack
 8000ba8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000bb4:	080014bc 	.word	0x080014bc
  ldr r2, =_sbss
 8000bb8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000bbc:	2000013c 	.word	0x2000013c

08000bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC1_2_IRQHandler>
	...

08000bc4 <__errno>:
 8000bc4:	4b01      	ldr	r3, [pc, #4]	; (8000bcc <__errno+0x8>)
 8000bc6:	6818      	ldr	r0, [r3, #0]
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000000 	.word	0x20000000

08000bd0 <__libc_init_array>:
 8000bd0:	b570      	push	{r4, r5, r6, lr}
 8000bd2:	2500      	movs	r5, #0
 8000bd4:	4e0c      	ldr	r6, [pc, #48]	; (8000c08 <__libc_init_array+0x38>)
 8000bd6:	4c0d      	ldr	r4, [pc, #52]	; (8000c0c <__libc_init_array+0x3c>)
 8000bd8:	1ba4      	subs	r4, r4, r6
 8000bda:	10a4      	asrs	r4, r4, #2
 8000bdc:	42a5      	cmp	r5, r4
 8000bde:	d109      	bne.n	8000bf4 <__libc_init_array+0x24>
 8000be0:	f000 fc2c 	bl	800143c <_init>
 8000be4:	2500      	movs	r5, #0
 8000be6:	4e0a      	ldr	r6, [pc, #40]	; (8000c10 <__libc_init_array+0x40>)
 8000be8:	4c0a      	ldr	r4, [pc, #40]	; (8000c14 <__libc_init_array+0x44>)
 8000bea:	1ba4      	subs	r4, r4, r6
 8000bec:	10a4      	asrs	r4, r4, #2
 8000bee:	42a5      	cmp	r5, r4
 8000bf0:	d105      	bne.n	8000bfe <__libc_init_array+0x2e>
 8000bf2:	bd70      	pop	{r4, r5, r6, pc}
 8000bf4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bf8:	4798      	blx	r3
 8000bfa:	3501      	adds	r5, #1
 8000bfc:	e7ee      	b.n	8000bdc <__libc_init_array+0xc>
 8000bfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c02:	4798      	blx	r3
 8000c04:	3501      	adds	r5, #1
 8000c06:	e7f2      	b.n	8000bee <__libc_init_array+0x1e>
 8000c08:	080014b4 	.word	0x080014b4
 8000c0c:	080014b4 	.word	0x080014b4
 8000c10:	080014b4 	.word	0x080014b4
 8000c14:	080014b8 	.word	0x080014b8

08000c18 <siprintf>:
 8000c18:	b40e      	push	{r1, r2, r3}
 8000c1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000c1e:	b500      	push	{lr}
 8000c20:	b09c      	sub	sp, #112	; 0x70
 8000c22:	ab1d      	add	r3, sp, #116	; 0x74
 8000c24:	9002      	str	r0, [sp, #8]
 8000c26:	9006      	str	r0, [sp, #24]
 8000c28:	9107      	str	r1, [sp, #28]
 8000c2a:	9104      	str	r1, [sp, #16]
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <siprintf+0x38>)
 8000c2e:	4909      	ldr	r1, [pc, #36]	; (8000c54 <siprintf+0x3c>)
 8000c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c34:	9105      	str	r1, [sp, #20]
 8000c36:	6800      	ldr	r0, [r0, #0]
 8000c38:	a902      	add	r1, sp, #8
 8000c3a:	9301      	str	r3, [sp, #4]
 8000c3c:	f000 f866 	bl	8000d0c <_svfiprintf_r>
 8000c40:	2200      	movs	r2, #0
 8000c42:	9b02      	ldr	r3, [sp, #8]
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	b01c      	add	sp, #112	; 0x70
 8000c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c4c:	b003      	add	sp, #12
 8000c4e:	4770      	bx	lr
 8000c50:	20000000 	.word	0x20000000
 8000c54:	ffff0208 	.word	0xffff0208

08000c58 <__ssputs_r>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	688e      	ldr	r6, [r1, #8]
 8000c5e:	4682      	mov	sl, r0
 8000c60:	429e      	cmp	r6, r3
 8000c62:	460c      	mov	r4, r1
 8000c64:	4690      	mov	r8, r2
 8000c66:	4699      	mov	r9, r3
 8000c68:	d837      	bhi.n	8000cda <__ssputs_r+0x82>
 8000c6a:	898a      	ldrh	r2, [r1, #12]
 8000c6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000c70:	d031      	beq.n	8000cd6 <__ssputs_r+0x7e>
 8000c72:	2302      	movs	r3, #2
 8000c74:	6825      	ldr	r5, [r4, #0]
 8000c76:	6909      	ldr	r1, [r1, #16]
 8000c78:	1a6f      	subs	r7, r5, r1
 8000c7a:	6965      	ldr	r5, [r4, #20]
 8000c7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000c80:	fb95 f5f3 	sdiv	r5, r5, r3
 8000c84:	f109 0301 	add.w	r3, r9, #1
 8000c88:	443b      	add	r3, r7
 8000c8a:	429d      	cmp	r5, r3
 8000c8c:	bf38      	it	cc
 8000c8e:	461d      	movcc	r5, r3
 8000c90:	0553      	lsls	r3, r2, #21
 8000c92:	d530      	bpl.n	8000cf6 <__ssputs_r+0x9e>
 8000c94:	4629      	mov	r1, r5
 8000c96:	f000 fb37 	bl	8001308 <_malloc_r>
 8000c9a:	4606      	mov	r6, r0
 8000c9c:	b950      	cbnz	r0, 8000cb4 <__ssputs_r+0x5c>
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f8ca 3000 	str.w	r3, [sl]
 8000ca8:	89a3      	ldrh	r3, [r4, #12]
 8000caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cae:	81a3      	strh	r3, [r4, #12]
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	463a      	mov	r2, r7
 8000cb6:	6921      	ldr	r1, [r4, #16]
 8000cb8:	f000 fab6 	bl	8001228 <memcpy>
 8000cbc:	89a3      	ldrh	r3, [r4, #12]
 8000cbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc6:	81a3      	strh	r3, [r4, #12]
 8000cc8:	6126      	str	r6, [r4, #16]
 8000cca:	443e      	add	r6, r7
 8000ccc:	6026      	str	r6, [r4, #0]
 8000cce:	464e      	mov	r6, r9
 8000cd0:	6165      	str	r5, [r4, #20]
 8000cd2:	1bed      	subs	r5, r5, r7
 8000cd4:	60a5      	str	r5, [r4, #8]
 8000cd6:	454e      	cmp	r6, r9
 8000cd8:	d900      	bls.n	8000cdc <__ssputs_r+0x84>
 8000cda:	464e      	mov	r6, r9
 8000cdc:	4632      	mov	r2, r6
 8000cde:	4641      	mov	r1, r8
 8000ce0:	6820      	ldr	r0, [r4, #0]
 8000ce2:	f000 faac 	bl	800123e <memmove>
 8000ce6:	68a3      	ldr	r3, [r4, #8]
 8000ce8:	2000      	movs	r0, #0
 8000cea:	1b9b      	subs	r3, r3, r6
 8000cec:	60a3      	str	r3, [r4, #8]
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	441e      	add	r6, r3
 8000cf2:	6026      	str	r6, [r4, #0]
 8000cf4:	e7dc      	b.n	8000cb0 <__ssputs_r+0x58>
 8000cf6:	462a      	mov	r2, r5
 8000cf8:	f000 fb60 	bl	80013bc <_realloc_r>
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d1e2      	bne.n	8000cc8 <__ssputs_r+0x70>
 8000d02:	6921      	ldr	r1, [r4, #16]
 8000d04:	4650      	mov	r0, sl
 8000d06:	f000 fab3 	bl	8001270 <_free_r>
 8000d0a:	e7c8      	b.n	8000c9e <__ssputs_r+0x46>

08000d0c <_svfiprintf_r>:
 8000d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d10:	461d      	mov	r5, r3
 8000d12:	898b      	ldrh	r3, [r1, #12]
 8000d14:	b09d      	sub	sp, #116	; 0x74
 8000d16:	061f      	lsls	r7, r3, #24
 8000d18:	4680      	mov	r8, r0
 8000d1a:	460c      	mov	r4, r1
 8000d1c:	4616      	mov	r6, r2
 8000d1e:	d50f      	bpl.n	8000d40 <_svfiprintf_r+0x34>
 8000d20:	690b      	ldr	r3, [r1, #16]
 8000d22:	b96b      	cbnz	r3, 8000d40 <_svfiprintf_r+0x34>
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	f000 faef 	bl	8001308 <_malloc_r>
 8000d2a:	6020      	str	r0, [r4, #0]
 8000d2c:	6120      	str	r0, [r4, #16]
 8000d2e:	b928      	cbnz	r0, 8000d3c <_svfiprintf_r+0x30>
 8000d30:	230c      	movs	r3, #12
 8000d32:	f8c8 3000 	str.w	r3, [r8]
 8000d36:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3a:	e0c8      	b.n	8000ece <_svfiprintf_r+0x1c2>
 8000d3c:	2340      	movs	r3, #64	; 0x40
 8000d3e:	6163      	str	r3, [r4, #20]
 8000d40:	2300      	movs	r3, #0
 8000d42:	9309      	str	r3, [sp, #36]	; 0x24
 8000d44:	2320      	movs	r3, #32
 8000d46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d4a:	2330      	movs	r3, #48	; 0x30
 8000d4c:	f04f 0b01 	mov.w	fp, #1
 8000d50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d54:	9503      	str	r5, [sp, #12]
 8000d56:	4637      	mov	r7, r6
 8000d58:	463d      	mov	r5, r7
 8000d5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000d5e:	b10b      	cbz	r3, 8000d64 <_svfiprintf_r+0x58>
 8000d60:	2b25      	cmp	r3, #37	; 0x25
 8000d62:	d13e      	bne.n	8000de2 <_svfiprintf_r+0xd6>
 8000d64:	ebb7 0a06 	subs.w	sl, r7, r6
 8000d68:	d00b      	beq.n	8000d82 <_svfiprintf_r+0x76>
 8000d6a:	4653      	mov	r3, sl
 8000d6c:	4632      	mov	r2, r6
 8000d6e:	4621      	mov	r1, r4
 8000d70:	4640      	mov	r0, r8
 8000d72:	f7ff ff71 	bl	8000c58 <__ssputs_r>
 8000d76:	3001      	adds	r0, #1
 8000d78:	f000 80a4 	beq.w	8000ec4 <_svfiprintf_r+0x1b8>
 8000d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d7e:	4453      	add	r3, sl
 8000d80:	9309      	str	r3, [sp, #36]	; 0x24
 8000d82:	783b      	ldrb	r3, [r7, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f000 809d 	beq.w	8000ec4 <_svfiprintf_r+0x1b8>
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d94:	9304      	str	r3, [sp, #16]
 8000d96:	9307      	str	r3, [sp, #28]
 8000d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8000d9e:	462f      	mov	r7, r5
 8000da0:	2205      	movs	r2, #5
 8000da2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8000da6:	4850      	ldr	r0, [pc, #320]	; (8000ee8 <_svfiprintf_r+0x1dc>)
 8000da8:	f000 fa30 	bl	800120c <memchr>
 8000dac:	9b04      	ldr	r3, [sp, #16]
 8000dae:	b9d0      	cbnz	r0, 8000de6 <_svfiprintf_r+0xda>
 8000db0:	06d9      	lsls	r1, r3, #27
 8000db2:	bf44      	itt	mi
 8000db4:	2220      	movmi	r2, #32
 8000db6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000dba:	071a      	lsls	r2, r3, #28
 8000dbc:	bf44      	itt	mi
 8000dbe:	222b      	movmi	r2, #43	; 0x2b
 8000dc0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000dc4:	782a      	ldrb	r2, [r5, #0]
 8000dc6:	2a2a      	cmp	r2, #42	; 0x2a
 8000dc8:	d015      	beq.n	8000df6 <_svfiprintf_r+0xea>
 8000dca:	462f      	mov	r7, r5
 8000dcc:	2000      	movs	r0, #0
 8000dce:	250a      	movs	r5, #10
 8000dd0:	9a07      	ldr	r2, [sp, #28]
 8000dd2:	4639      	mov	r1, r7
 8000dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dd8:	3b30      	subs	r3, #48	; 0x30
 8000dda:	2b09      	cmp	r3, #9
 8000ddc:	d94d      	bls.n	8000e7a <_svfiprintf_r+0x16e>
 8000dde:	b1b8      	cbz	r0, 8000e10 <_svfiprintf_r+0x104>
 8000de0:	e00f      	b.n	8000e02 <_svfiprintf_r+0xf6>
 8000de2:	462f      	mov	r7, r5
 8000de4:	e7b8      	b.n	8000d58 <_svfiprintf_r+0x4c>
 8000de6:	4a40      	ldr	r2, [pc, #256]	; (8000ee8 <_svfiprintf_r+0x1dc>)
 8000de8:	463d      	mov	r5, r7
 8000dea:	1a80      	subs	r0, r0, r2
 8000dec:	fa0b f000 	lsl.w	r0, fp, r0
 8000df0:	4318      	orrs	r0, r3
 8000df2:	9004      	str	r0, [sp, #16]
 8000df4:	e7d3      	b.n	8000d9e <_svfiprintf_r+0x92>
 8000df6:	9a03      	ldr	r2, [sp, #12]
 8000df8:	1d11      	adds	r1, r2, #4
 8000dfa:	6812      	ldr	r2, [r2, #0]
 8000dfc:	9103      	str	r1, [sp, #12]
 8000dfe:	2a00      	cmp	r2, #0
 8000e00:	db01      	blt.n	8000e06 <_svfiprintf_r+0xfa>
 8000e02:	9207      	str	r2, [sp, #28]
 8000e04:	e004      	b.n	8000e10 <_svfiprintf_r+0x104>
 8000e06:	4252      	negs	r2, r2
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	9207      	str	r2, [sp, #28]
 8000e0e:	9304      	str	r3, [sp, #16]
 8000e10:	783b      	ldrb	r3, [r7, #0]
 8000e12:	2b2e      	cmp	r3, #46	; 0x2e
 8000e14:	d10c      	bne.n	8000e30 <_svfiprintf_r+0x124>
 8000e16:	787b      	ldrb	r3, [r7, #1]
 8000e18:	2b2a      	cmp	r3, #42	; 0x2a
 8000e1a:	d133      	bne.n	8000e84 <_svfiprintf_r+0x178>
 8000e1c:	9b03      	ldr	r3, [sp, #12]
 8000e1e:	3702      	adds	r7, #2
 8000e20:	1d1a      	adds	r2, r3, #4
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	9203      	str	r2, [sp, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bfb8      	it	lt
 8000e2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e2e:	9305      	str	r3, [sp, #20]
 8000e30:	4d2e      	ldr	r5, [pc, #184]	; (8000eec <_svfiprintf_r+0x1e0>)
 8000e32:	2203      	movs	r2, #3
 8000e34:	7839      	ldrb	r1, [r7, #0]
 8000e36:	4628      	mov	r0, r5
 8000e38:	f000 f9e8 	bl	800120c <memchr>
 8000e3c:	b138      	cbz	r0, 8000e4e <_svfiprintf_r+0x142>
 8000e3e:	2340      	movs	r3, #64	; 0x40
 8000e40:	1b40      	subs	r0, r0, r5
 8000e42:	fa03 f000 	lsl.w	r0, r3, r0
 8000e46:	9b04      	ldr	r3, [sp, #16]
 8000e48:	3701      	adds	r7, #1
 8000e4a:	4303      	orrs	r3, r0
 8000e4c:	9304      	str	r3, [sp, #16]
 8000e4e:	7839      	ldrb	r1, [r7, #0]
 8000e50:	2206      	movs	r2, #6
 8000e52:	4827      	ldr	r0, [pc, #156]	; (8000ef0 <_svfiprintf_r+0x1e4>)
 8000e54:	1c7e      	adds	r6, r7, #1
 8000e56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e5a:	f000 f9d7 	bl	800120c <memchr>
 8000e5e:	2800      	cmp	r0, #0
 8000e60:	d038      	beq.n	8000ed4 <_svfiprintf_r+0x1c8>
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <_svfiprintf_r+0x1e8>)
 8000e64:	bb13      	cbnz	r3, 8000eac <_svfiprintf_r+0x1a0>
 8000e66:	9b03      	ldr	r3, [sp, #12]
 8000e68:	3307      	adds	r3, #7
 8000e6a:	f023 0307 	bic.w	r3, r3, #7
 8000e6e:	3308      	adds	r3, #8
 8000e70:	9303      	str	r3, [sp, #12]
 8000e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e74:	444b      	add	r3, r9
 8000e76:	9309      	str	r3, [sp, #36]	; 0x24
 8000e78:	e76d      	b.n	8000d56 <_svfiprintf_r+0x4a>
 8000e7a:	fb05 3202 	mla	r2, r5, r2, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	460f      	mov	r7, r1
 8000e82:	e7a6      	b.n	8000dd2 <_svfiprintf_r+0xc6>
 8000e84:	2300      	movs	r3, #0
 8000e86:	250a      	movs	r5, #10
 8000e88:	4619      	mov	r1, r3
 8000e8a:	3701      	adds	r7, #1
 8000e8c:	9305      	str	r3, [sp, #20]
 8000e8e:	4638      	mov	r0, r7
 8000e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e94:	3a30      	subs	r2, #48	; 0x30
 8000e96:	2a09      	cmp	r2, #9
 8000e98:	d903      	bls.n	8000ea2 <_svfiprintf_r+0x196>
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0c8      	beq.n	8000e30 <_svfiprintf_r+0x124>
 8000e9e:	9105      	str	r1, [sp, #20]
 8000ea0:	e7c6      	b.n	8000e30 <_svfiprintf_r+0x124>
 8000ea2:	fb05 2101 	mla	r1, r5, r1, r2
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	4607      	mov	r7, r0
 8000eaa:	e7f0      	b.n	8000e8e <_svfiprintf_r+0x182>
 8000eac:	ab03      	add	r3, sp, #12
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	4622      	mov	r2, r4
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <_svfiprintf_r+0x1ec>)
 8000eb4:	a904      	add	r1, sp, #16
 8000eb6:	4640      	mov	r0, r8
 8000eb8:	f3af 8000 	nop.w
 8000ebc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	d1d6      	bne.n	8000e72 <_svfiprintf_r+0x166>
 8000ec4:	89a3      	ldrh	r3, [r4, #12]
 8000ec6:	065b      	lsls	r3, r3, #25
 8000ec8:	f53f af35 	bmi.w	8000d36 <_svfiprintf_r+0x2a>
 8000ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ece:	b01d      	add	sp, #116	; 0x74
 8000ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ed4:	ab03      	add	r3, sp, #12
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	4622      	mov	r2, r4
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <_svfiprintf_r+0x1ec>)
 8000edc:	a904      	add	r1, sp, #16
 8000ede:	4640      	mov	r0, r8
 8000ee0:	f000 f882 	bl	8000fe8 <_printf_i>
 8000ee4:	e7ea      	b.n	8000ebc <_svfiprintf_r+0x1b0>
 8000ee6:	bf00      	nop
 8000ee8:	08001480 	.word	0x08001480
 8000eec:	08001486 	.word	0x08001486
 8000ef0:	0800148a 	.word	0x0800148a
 8000ef4:	00000000 	.word	0x00000000
 8000ef8:	08000c59 	.word	0x08000c59

08000efc <_printf_common>:
 8000efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f00:	4691      	mov	r9, r2
 8000f02:	461f      	mov	r7, r3
 8000f04:	688a      	ldr	r2, [r1, #8]
 8000f06:	690b      	ldr	r3, [r1, #16]
 8000f08:	4606      	mov	r6, r0
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	bfb8      	it	lt
 8000f0e:	4613      	movlt	r3, r2
 8000f10:	f8c9 3000 	str.w	r3, [r9]
 8000f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f18:	460c      	mov	r4, r1
 8000f1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f1e:	b112      	cbz	r2, 8000f26 <_printf_common+0x2a>
 8000f20:	3301      	adds	r3, #1
 8000f22:	f8c9 3000 	str.w	r3, [r9]
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	0699      	lsls	r1, r3, #26
 8000f2a:	bf42      	ittt	mi
 8000f2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8000f30:	3302      	addmi	r3, #2
 8000f32:	f8c9 3000 	strmi.w	r3, [r9]
 8000f36:	6825      	ldr	r5, [r4, #0]
 8000f38:	f015 0506 	ands.w	r5, r5, #6
 8000f3c:	d107      	bne.n	8000f4e <_printf_common+0x52>
 8000f3e:	f104 0a19 	add.w	sl, r4, #25
 8000f42:	68e3      	ldr	r3, [r4, #12]
 8000f44:	f8d9 2000 	ldr.w	r2, [r9]
 8000f48:	1a9b      	subs	r3, r3, r2
 8000f4a:	42ab      	cmp	r3, r5
 8000f4c:	dc29      	bgt.n	8000fa2 <_printf_common+0xa6>
 8000f4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8000f52:	6822      	ldr	r2, [r4, #0]
 8000f54:	3300      	adds	r3, #0
 8000f56:	bf18      	it	ne
 8000f58:	2301      	movne	r3, #1
 8000f5a:	0692      	lsls	r2, r2, #26
 8000f5c:	d42e      	bmi.n	8000fbc <_printf_common+0xc0>
 8000f5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f62:	4639      	mov	r1, r7
 8000f64:	4630      	mov	r0, r6
 8000f66:	47c0      	blx	r8
 8000f68:	3001      	adds	r0, #1
 8000f6a:	d021      	beq.n	8000fb0 <_printf_common+0xb4>
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	68e5      	ldr	r5, [r4, #12]
 8000f70:	f003 0306 	and.w	r3, r3, #6
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	bf18      	it	ne
 8000f78:	2500      	movne	r5, #0
 8000f7a:	f8d9 2000 	ldr.w	r2, [r9]
 8000f7e:	f04f 0900 	mov.w	r9, #0
 8000f82:	bf08      	it	eq
 8000f84:	1aad      	subeq	r5, r5, r2
 8000f86:	68a3      	ldr	r3, [r4, #8]
 8000f88:	6922      	ldr	r2, [r4, #16]
 8000f8a:	bf08      	it	eq
 8000f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f90:	4293      	cmp	r3, r2
 8000f92:	bfc4      	itt	gt
 8000f94:	1a9b      	subgt	r3, r3, r2
 8000f96:	18ed      	addgt	r5, r5, r3
 8000f98:	341a      	adds	r4, #26
 8000f9a:	454d      	cmp	r5, r9
 8000f9c:	d11a      	bne.n	8000fd4 <_printf_common+0xd8>
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	e008      	b.n	8000fb4 <_printf_common+0xb8>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	4652      	mov	r2, sl
 8000fa6:	4639      	mov	r1, r7
 8000fa8:	4630      	mov	r0, r6
 8000faa:	47c0      	blx	r8
 8000fac:	3001      	adds	r0, #1
 8000fae:	d103      	bne.n	8000fb8 <_printf_common+0xbc>
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb8:	3501      	adds	r5, #1
 8000fba:	e7c2      	b.n	8000f42 <_printf_common+0x46>
 8000fbc:	2030      	movs	r0, #48	; 0x30
 8000fbe:	18e1      	adds	r1, r4, r3
 8000fc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000fca:	4422      	add	r2, r4
 8000fcc:	3302      	adds	r3, #2
 8000fce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000fd2:	e7c4      	b.n	8000f5e <_printf_common+0x62>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	4639      	mov	r1, r7
 8000fda:	4630      	mov	r0, r6
 8000fdc:	47c0      	blx	r8
 8000fde:	3001      	adds	r0, #1
 8000fe0:	d0e6      	beq.n	8000fb0 <_printf_common+0xb4>
 8000fe2:	f109 0901 	add.w	r9, r9, #1
 8000fe6:	e7d8      	b.n	8000f9a <_printf_common+0x9e>

08000fe8 <_printf_i>:
 8000fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8000ff0:	460c      	mov	r4, r1
 8000ff2:	7e09      	ldrb	r1, [r1, #24]
 8000ff4:	b085      	sub	sp, #20
 8000ff6:	296e      	cmp	r1, #110	; 0x6e
 8000ff8:	4617      	mov	r7, r2
 8000ffa:	4606      	mov	r6, r0
 8000ffc:	4698      	mov	r8, r3
 8000ffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001000:	f000 80b3 	beq.w	800116a <_printf_i+0x182>
 8001004:	d822      	bhi.n	800104c <_printf_i+0x64>
 8001006:	2963      	cmp	r1, #99	; 0x63
 8001008:	d036      	beq.n	8001078 <_printf_i+0x90>
 800100a:	d80a      	bhi.n	8001022 <_printf_i+0x3a>
 800100c:	2900      	cmp	r1, #0
 800100e:	f000 80b9 	beq.w	8001184 <_printf_i+0x19c>
 8001012:	2958      	cmp	r1, #88	; 0x58
 8001014:	f000 8083 	beq.w	800111e <_printf_i+0x136>
 8001018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800101c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001020:	e032      	b.n	8001088 <_printf_i+0xa0>
 8001022:	2964      	cmp	r1, #100	; 0x64
 8001024:	d001      	beq.n	800102a <_printf_i+0x42>
 8001026:	2969      	cmp	r1, #105	; 0x69
 8001028:	d1f6      	bne.n	8001018 <_printf_i+0x30>
 800102a:	6820      	ldr	r0, [r4, #0]
 800102c:	6813      	ldr	r3, [r2, #0]
 800102e:	0605      	lsls	r5, r0, #24
 8001030:	f103 0104 	add.w	r1, r3, #4
 8001034:	d52a      	bpl.n	800108c <_printf_i+0xa4>
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6011      	str	r1, [r2, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	da03      	bge.n	8001046 <_printf_i+0x5e>
 800103e:	222d      	movs	r2, #45	; 0x2d
 8001040:	425b      	negs	r3, r3
 8001042:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001046:	486f      	ldr	r0, [pc, #444]	; (8001204 <_printf_i+0x21c>)
 8001048:	220a      	movs	r2, #10
 800104a:	e039      	b.n	80010c0 <_printf_i+0xd8>
 800104c:	2973      	cmp	r1, #115	; 0x73
 800104e:	f000 809d 	beq.w	800118c <_printf_i+0x1a4>
 8001052:	d808      	bhi.n	8001066 <_printf_i+0x7e>
 8001054:	296f      	cmp	r1, #111	; 0x6f
 8001056:	d020      	beq.n	800109a <_printf_i+0xb2>
 8001058:	2970      	cmp	r1, #112	; 0x70
 800105a:	d1dd      	bne.n	8001018 <_printf_i+0x30>
 800105c:	6823      	ldr	r3, [r4, #0]
 800105e:	f043 0320 	orr.w	r3, r3, #32
 8001062:	6023      	str	r3, [r4, #0]
 8001064:	e003      	b.n	800106e <_printf_i+0x86>
 8001066:	2975      	cmp	r1, #117	; 0x75
 8001068:	d017      	beq.n	800109a <_printf_i+0xb2>
 800106a:	2978      	cmp	r1, #120	; 0x78
 800106c:	d1d4      	bne.n	8001018 <_printf_i+0x30>
 800106e:	2378      	movs	r3, #120	; 0x78
 8001070:	4865      	ldr	r0, [pc, #404]	; (8001208 <_printf_i+0x220>)
 8001072:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001076:	e055      	b.n	8001124 <_printf_i+0x13c>
 8001078:	6813      	ldr	r3, [r2, #0]
 800107a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800107e:	1d19      	adds	r1, r3, #4
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6011      	str	r1, [r2, #0]
 8001084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001088:	2301      	movs	r3, #1
 800108a:	e08c      	b.n	80011a6 <_printf_i+0x1be>
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001092:	6011      	str	r1, [r2, #0]
 8001094:	bf18      	it	ne
 8001096:	b21b      	sxthne	r3, r3
 8001098:	e7cf      	b.n	800103a <_printf_i+0x52>
 800109a:	6813      	ldr	r3, [r2, #0]
 800109c:	6825      	ldr	r5, [r4, #0]
 800109e:	1d18      	adds	r0, r3, #4
 80010a0:	6010      	str	r0, [r2, #0]
 80010a2:	0628      	lsls	r0, r5, #24
 80010a4:	d501      	bpl.n	80010aa <_printf_i+0xc2>
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	e002      	b.n	80010b0 <_printf_i+0xc8>
 80010aa:	0668      	lsls	r0, r5, #25
 80010ac:	d5fb      	bpl.n	80010a6 <_printf_i+0xbe>
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	296f      	cmp	r1, #111	; 0x6f
 80010b2:	bf14      	ite	ne
 80010b4:	220a      	movne	r2, #10
 80010b6:	2208      	moveq	r2, #8
 80010b8:	4852      	ldr	r0, [pc, #328]	; (8001204 <_printf_i+0x21c>)
 80010ba:	2100      	movs	r1, #0
 80010bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80010c0:	6865      	ldr	r5, [r4, #4]
 80010c2:	2d00      	cmp	r5, #0
 80010c4:	60a5      	str	r5, [r4, #8]
 80010c6:	f2c0 8095 	blt.w	80011f4 <_printf_i+0x20c>
 80010ca:	6821      	ldr	r1, [r4, #0]
 80010cc:	f021 0104 	bic.w	r1, r1, #4
 80010d0:	6021      	str	r1, [r4, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d13d      	bne.n	8001152 <_printf_i+0x16a>
 80010d6:	2d00      	cmp	r5, #0
 80010d8:	f040 808e 	bne.w	80011f8 <_printf_i+0x210>
 80010dc:	4665      	mov	r5, ip
 80010de:	2a08      	cmp	r2, #8
 80010e0:	d10b      	bne.n	80010fa <_printf_i+0x112>
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	07db      	lsls	r3, r3, #31
 80010e6:	d508      	bpl.n	80010fa <_printf_i+0x112>
 80010e8:	6923      	ldr	r3, [r4, #16]
 80010ea:	6862      	ldr	r2, [r4, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	bfde      	ittt	le
 80010f0:	2330      	movle	r3, #48	; 0x30
 80010f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80010f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80010fa:	ebac 0305 	sub.w	r3, ip, r5
 80010fe:	6123      	str	r3, [r4, #16]
 8001100:	f8cd 8000 	str.w	r8, [sp]
 8001104:	463b      	mov	r3, r7
 8001106:	aa03      	add	r2, sp, #12
 8001108:	4621      	mov	r1, r4
 800110a:	4630      	mov	r0, r6
 800110c:	f7ff fef6 	bl	8000efc <_printf_common>
 8001110:	3001      	adds	r0, #1
 8001112:	d14d      	bne.n	80011b0 <_printf_i+0x1c8>
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	b005      	add	sp, #20
 800111a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800111e:	4839      	ldr	r0, [pc, #228]	; (8001204 <_printf_i+0x21c>)
 8001120:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001124:	6813      	ldr	r3, [r2, #0]
 8001126:	6821      	ldr	r1, [r4, #0]
 8001128:	1d1d      	adds	r5, r3, #4
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6015      	str	r5, [r2, #0]
 800112e:	060a      	lsls	r2, r1, #24
 8001130:	d50b      	bpl.n	800114a <_printf_i+0x162>
 8001132:	07ca      	lsls	r2, r1, #31
 8001134:	bf44      	itt	mi
 8001136:	f041 0120 	orrmi.w	r1, r1, #32
 800113a:	6021      	strmi	r1, [r4, #0]
 800113c:	b91b      	cbnz	r3, 8001146 <_printf_i+0x15e>
 800113e:	6822      	ldr	r2, [r4, #0]
 8001140:	f022 0220 	bic.w	r2, r2, #32
 8001144:	6022      	str	r2, [r4, #0]
 8001146:	2210      	movs	r2, #16
 8001148:	e7b7      	b.n	80010ba <_printf_i+0xd2>
 800114a:	064d      	lsls	r5, r1, #25
 800114c:	bf48      	it	mi
 800114e:	b29b      	uxthmi	r3, r3
 8001150:	e7ef      	b.n	8001132 <_printf_i+0x14a>
 8001152:	4665      	mov	r5, ip
 8001154:	fbb3 f1f2 	udiv	r1, r3, r2
 8001158:	fb02 3311 	mls	r3, r2, r1, r3
 800115c:	5cc3      	ldrb	r3, [r0, r3]
 800115e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001162:	460b      	mov	r3, r1
 8001164:	2900      	cmp	r1, #0
 8001166:	d1f5      	bne.n	8001154 <_printf_i+0x16c>
 8001168:	e7b9      	b.n	80010de <_printf_i+0xf6>
 800116a:	6813      	ldr	r3, [r2, #0]
 800116c:	6825      	ldr	r5, [r4, #0]
 800116e:	1d18      	adds	r0, r3, #4
 8001170:	6961      	ldr	r1, [r4, #20]
 8001172:	6010      	str	r0, [r2, #0]
 8001174:	0628      	lsls	r0, r5, #24
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	d501      	bpl.n	800117e <_printf_i+0x196>
 800117a:	6019      	str	r1, [r3, #0]
 800117c:	e002      	b.n	8001184 <_printf_i+0x19c>
 800117e:	066a      	lsls	r2, r5, #25
 8001180:	d5fb      	bpl.n	800117a <_printf_i+0x192>
 8001182:	8019      	strh	r1, [r3, #0]
 8001184:	2300      	movs	r3, #0
 8001186:	4665      	mov	r5, ip
 8001188:	6123      	str	r3, [r4, #16]
 800118a:	e7b9      	b.n	8001100 <_printf_i+0x118>
 800118c:	6813      	ldr	r3, [r2, #0]
 800118e:	1d19      	adds	r1, r3, #4
 8001190:	6011      	str	r1, [r2, #0]
 8001192:	681d      	ldr	r5, [r3, #0]
 8001194:	6862      	ldr	r2, [r4, #4]
 8001196:	2100      	movs	r1, #0
 8001198:	4628      	mov	r0, r5
 800119a:	f000 f837 	bl	800120c <memchr>
 800119e:	b108      	cbz	r0, 80011a4 <_printf_i+0x1bc>
 80011a0:	1b40      	subs	r0, r0, r5
 80011a2:	6060      	str	r0, [r4, #4]
 80011a4:	6863      	ldr	r3, [r4, #4]
 80011a6:	6123      	str	r3, [r4, #16]
 80011a8:	2300      	movs	r3, #0
 80011aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011ae:	e7a7      	b.n	8001100 <_printf_i+0x118>
 80011b0:	6923      	ldr	r3, [r4, #16]
 80011b2:	462a      	mov	r2, r5
 80011b4:	4639      	mov	r1, r7
 80011b6:	4630      	mov	r0, r6
 80011b8:	47c0      	blx	r8
 80011ba:	3001      	adds	r0, #1
 80011bc:	d0aa      	beq.n	8001114 <_printf_i+0x12c>
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	079b      	lsls	r3, r3, #30
 80011c2:	d413      	bmi.n	80011ec <_printf_i+0x204>
 80011c4:	68e0      	ldr	r0, [r4, #12]
 80011c6:	9b03      	ldr	r3, [sp, #12]
 80011c8:	4298      	cmp	r0, r3
 80011ca:	bfb8      	it	lt
 80011cc:	4618      	movlt	r0, r3
 80011ce:	e7a3      	b.n	8001118 <_printf_i+0x130>
 80011d0:	2301      	movs	r3, #1
 80011d2:	464a      	mov	r2, r9
 80011d4:	4639      	mov	r1, r7
 80011d6:	4630      	mov	r0, r6
 80011d8:	47c0      	blx	r8
 80011da:	3001      	adds	r0, #1
 80011dc:	d09a      	beq.n	8001114 <_printf_i+0x12c>
 80011de:	3501      	adds	r5, #1
 80011e0:	68e3      	ldr	r3, [r4, #12]
 80011e2:	9a03      	ldr	r2, [sp, #12]
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	42ab      	cmp	r3, r5
 80011e8:	dcf2      	bgt.n	80011d0 <_printf_i+0x1e8>
 80011ea:	e7eb      	b.n	80011c4 <_printf_i+0x1dc>
 80011ec:	2500      	movs	r5, #0
 80011ee:	f104 0919 	add.w	r9, r4, #25
 80011f2:	e7f5      	b.n	80011e0 <_printf_i+0x1f8>
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1ac      	bne.n	8001152 <_printf_i+0x16a>
 80011f8:	7803      	ldrb	r3, [r0, #0]
 80011fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80011fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001202:	e76c      	b.n	80010de <_printf_i+0xf6>
 8001204:	08001491 	.word	0x08001491
 8001208:	080014a2 	.word	0x080014a2

0800120c <memchr>:
 800120c:	b510      	push	{r4, lr}
 800120e:	b2c9      	uxtb	r1, r1
 8001210:	4402      	add	r2, r0
 8001212:	4290      	cmp	r0, r2
 8001214:	4603      	mov	r3, r0
 8001216:	d101      	bne.n	800121c <memchr+0x10>
 8001218:	2300      	movs	r3, #0
 800121a:	e003      	b.n	8001224 <memchr+0x18>
 800121c:	781c      	ldrb	r4, [r3, #0]
 800121e:	3001      	adds	r0, #1
 8001220:	428c      	cmp	r4, r1
 8001222:	d1f6      	bne.n	8001212 <memchr+0x6>
 8001224:	4618      	mov	r0, r3
 8001226:	bd10      	pop	{r4, pc}

08001228 <memcpy>:
 8001228:	b510      	push	{r4, lr}
 800122a:	1e43      	subs	r3, r0, #1
 800122c:	440a      	add	r2, r1
 800122e:	4291      	cmp	r1, r2
 8001230:	d100      	bne.n	8001234 <memcpy+0xc>
 8001232:	bd10      	pop	{r4, pc}
 8001234:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001238:	f803 4f01 	strb.w	r4, [r3, #1]!
 800123c:	e7f7      	b.n	800122e <memcpy+0x6>

0800123e <memmove>:
 800123e:	4288      	cmp	r0, r1
 8001240:	b510      	push	{r4, lr}
 8001242:	eb01 0302 	add.w	r3, r1, r2
 8001246:	d807      	bhi.n	8001258 <memmove+0x1a>
 8001248:	1e42      	subs	r2, r0, #1
 800124a:	4299      	cmp	r1, r3
 800124c:	d00a      	beq.n	8001264 <memmove+0x26>
 800124e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001252:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001256:	e7f8      	b.n	800124a <memmove+0xc>
 8001258:	4283      	cmp	r3, r0
 800125a:	d9f5      	bls.n	8001248 <memmove+0xa>
 800125c:	1881      	adds	r1, r0, r2
 800125e:	1ad2      	subs	r2, r2, r3
 8001260:	42d3      	cmn	r3, r2
 8001262:	d100      	bne.n	8001266 <memmove+0x28>
 8001264:	bd10      	pop	{r4, pc}
 8001266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800126a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800126e:	e7f7      	b.n	8001260 <memmove+0x22>

08001270 <_free_r>:
 8001270:	b538      	push	{r3, r4, r5, lr}
 8001272:	4605      	mov	r5, r0
 8001274:	2900      	cmp	r1, #0
 8001276:	d043      	beq.n	8001300 <_free_r+0x90>
 8001278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800127c:	1f0c      	subs	r4, r1, #4
 800127e:	2b00      	cmp	r3, #0
 8001280:	bfb8      	it	lt
 8001282:	18e4      	addlt	r4, r4, r3
 8001284:	f000 f8d0 	bl	8001428 <__malloc_lock>
 8001288:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <_free_r+0x94>)
 800128a:	6813      	ldr	r3, [r2, #0]
 800128c:	4610      	mov	r0, r2
 800128e:	b933      	cbnz	r3, 800129e <_free_r+0x2e>
 8001290:	6063      	str	r3, [r4, #4]
 8001292:	6014      	str	r4, [r2, #0]
 8001294:	4628      	mov	r0, r5
 8001296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800129a:	f000 b8c6 	b.w	800142a <__malloc_unlock>
 800129e:	42a3      	cmp	r3, r4
 80012a0:	d90b      	bls.n	80012ba <_free_r+0x4a>
 80012a2:	6821      	ldr	r1, [r4, #0]
 80012a4:	1862      	adds	r2, r4, r1
 80012a6:	4293      	cmp	r3, r2
 80012a8:	bf01      	itttt	eq
 80012aa:	681a      	ldreq	r2, [r3, #0]
 80012ac:	685b      	ldreq	r3, [r3, #4]
 80012ae:	1852      	addeq	r2, r2, r1
 80012b0:	6022      	streq	r2, [r4, #0]
 80012b2:	6063      	str	r3, [r4, #4]
 80012b4:	6004      	str	r4, [r0, #0]
 80012b6:	e7ed      	b.n	8001294 <_free_r+0x24>
 80012b8:	4613      	mov	r3, r2
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	b10a      	cbz	r2, 80012c2 <_free_r+0x52>
 80012be:	42a2      	cmp	r2, r4
 80012c0:	d9fa      	bls.n	80012b8 <_free_r+0x48>
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	1858      	adds	r0, r3, r1
 80012c6:	42a0      	cmp	r0, r4
 80012c8:	d10b      	bne.n	80012e2 <_free_r+0x72>
 80012ca:	6820      	ldr	r0, [r4, #0]
 80012cc:	4401      	add	r1, r0
 80012ce:	1858      	adds	r0, r3, r1
 80012d0:	4282      	cmp	r2, r0
 80012d2:	6019      	str	r1, [r3, #0]
 80012d4:	d1de      	bne.n	8001294 <_free_r+0x24>
 80012d6:	6810      	ldr	r0, [r2, #0]
 80012d8:	6852      	ldr	r2, [r2, #4]
 80012da:	4401      	add	r1, r0
 80012dc:	6019      	str	r1, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	e7d8      	b.n	8001294 <_free_r+0x24>
 80012e2:	d902      	bls.n	80012ea <_free_r+0x7a>
 80012e4:	230c      	movs	r3, #12
 80012e6:	602b      	str	r3, [r5, #0]
 80012e8:	e7d4      	b.n	8001294 <_free_r+0x24>
 80012ea:	6820      	ldr	r0, [r4, #0]
 80012ec:	1821      	adds	r1, r4, r0
 80012ee:	428a      	cmp	r2, r1
 80012f0:	bf01      	itttt	eq
 80012f2:	6811      	ldreq	r1, [r2, #0]
 80012f4:	6852      	ldreq	r2, [r2, #4]
 80012f6:	1809      	addeq	r1, r1, r0
 80012f8:	6021      	streq	r1, [r4, #0]
 80012fa:	6062      	str	r2, [r4, #4]
 80012fc:	605c      	str	r4, [r3, #4]
 80012fe:	e7c9      	b.n	8001294 <_free_r+0x24>
 8001300:	bd38      	pop	{r3, r4, r5, pc}
 8001302:	bf00      	nop
 8001304:	20000098 	.word	0x20000098

08001308 <_malloc_r>:
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	1ccd      	adds	r5, r1, #3
 800130c:	f025 0503 	bic.w	r5, r5, #3
 8001310:	3508      	adds	r5, #8
 8001312:	2d0c      	cmp	r5, #12
 8001314:	bf38      	it	cc
 8001316:	250c      	movcc	r5, #12
 8001318:	2d00      	cmp	r5, #0
 800131a:	4606      	mov	r6, r0
 800131c:	db01      	blt.n	8001322 <_malloc_r+0x1a>
 800131e:	42a9      	cmp	r1, r5
 8001320:	d903      	bls.n	800132a <_malloc_r+0x22>
 8001322:	230c      	movs	r3, #12
 8001324:	6033      	str	r3, [r6, #0]
 8001326:	2000      	movs	r0, #0
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	f000 f87d 	bl	8001428 <__malloc_lock>
 800132e:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <_malloc_r+0xac>)
 8001330:	6814      	ldr	r4, [r2, #0]
 8001332:	4621      	mov	r1, r4
 8001334:	b991      	cbnz	r1, 800135c <_malloc_r+0x54>
 8001336:	4c20      	ldr	r4, [pc, #128]	; (80013b8 <_malloc_r+0xb0>)
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	b91b      	cbnz	r3, 8001344 <_malloc_r+0x3c>
 800133c:	4630      	mov	r0, r6
 800133e:	f000 f863 	bl	8001408 <_sbrk_r>
 8001342:	6020      	str	r0, [r4, #0]
 8001344:	4629      	mov	r1, r5
 8001346:	4630      	mov	r0, r6
 8001348:	f000 f85e 	bl	8001408 <_sbrk_r>
 800134c:	1c43      	adds	r3, r0, #1
 800134e:	d124      	bne.n	800139a <_malloc_r+0x92>
 8001350:	230c      	movs	r3, #12
 8001352:	4630      	mov	r0, r6
 8001354:	6033      	str	r3, [r6, #0]
 8001356:	f000 f868 	bl	800142a <__malloc_unlock>
 800135a:	e7e4      	b.n	8001326 <_malloc_r+0x1e>
 800135c:	680b      	ldr	r3, [r1, #0]
 800135e:	1b5b      	subs	r3, r3, r5
 8001360:	d418      	bmi.n	8001394 <_malloc_r+0x8c>
 8001362:	2b0b      	cmp	r3, #11
 8001364:	d90f      	bls.n	8001386 <_malloc_r+0x7e>
 8001366:	600b      	str	r3, [r1, #0]
 8001368:	18cc      	adds	r4, r1, r3
 800136a:	50cd      	str	r5, [r1, r3]
 800136c:	4630      	mov	r0, r6
 800136e:	f000 f85c 	bl	800142a <__malloc_unlock>
 8001372:	f104 000b 	add.w	r0, r4, #11
 8001376:	1d23      	adds	r3, r4, #4
 8001378:	f020 0007 	bic.w	r0, r0, #7
 800137c:	1ac3      	subs	r3, r0, r3
 800137e:	d0d3      	beq.n	8001328 <_malloc_r+0x20>
 8001380:	425a      	negs	r2, r3
 8001382:	50e2      	str	r2, [r4, r3]
 8001384:	e7d0      	b.n	8001328 <_malloc_r+0x20>
 8001386:	684b      	ldr	r3, [r1, #4]
 8001388:	428c      	cmp	r4, r1
 800138a:	bf16      	itet	ne
 800138c:	6063      	strne	r3, [r4, #4]
 800138e:	6013      	streq	r3, [r2, #0]
 8001390:	460c      	movne	r4, r1
 8001392:	e7eb      	b.n	800136c <_malloc_r+0x64>
 8001394:	460c      	mov	r4, r1
 8001396:	6849      	ldr	r1, [r1, #4]
 8001398:	e7cc      	b.n	8001334 <_malloc_r+0x2c>
 800139a:	1cc4      	adds	r4, r0, #3
 800139c:	f024 0403 	bic.w	r4, r4, #3
 80013a0:	42a0      	cmp	r0, r4
 80013a2:	d005      	beq.n	80013b0 <_malloc_r+0xa8>
 80013a4:	1a21      	subs	r1, r4, r0
 80013a6:	4630      	mov	r0, r6
 80013a8:	f000 f82e 	bl	8001408 <_sbrk_r>
 80013ac:	3001      	adds	r0, #1
 80013ae:	d0cf      	beq.n	8001350 <_malloc_r+0x48>
 80013b0:	6025      	str	r5, [r4, #0]
 80013b2:	e7db      	b.n	800136c <_malloc_r+0x64>
 80013b4:	20000098 	.word	0x20000098
 80013b8:	2000009c 	.word	0x2000009c

080013bc <_realloc_r>:
 80013bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013be:	4607      	mov	r7, r0
 80013c0:	4614      	mov	r4, r2
 80013c2:	460e      	mov	r6, r1
 80013c4:	b921      	cbnz	r1, 80013d0 <_realloc_r+0x14>
 80013c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80013ca:	4611      	mov	r1, r2
 80013cc:	f7ff bf9c 	b.w	8001308 <_malloc_r>
 80013d0:	b922      	cbnz	r2, 80013dc <_realloc_r+0x20>
 80013d2:	f7ff ff4d 	bl	8001270 <_free_r>
 80013d6:	4625      	mov	r5, r4
 80013d8:	4628      	mov	r0, r5
 80013da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013dc:	f000 f826 	bl	800142c <_malloc_usable_size_r>
 80013e0:	42a0      	cmp	r0, r4
 80013e2:	d20f      	bcs.n	8001404 <_realloc_r+0x48>
 80013e4:	4621      	mov	r1, r4
 80013e6:	4638      	mov	r0, r7
 80013e8:	f7ff ff8e 	bl	8001308 <_malloc_r>
 80013ec:	4605      	mov	r5, r0
 80013ee:	2800      	cmp	r0, #0
 80013f0:	d0f2      	beq.n	80013d8 <_realloc_r+0x1c>
 80013f2:	4631      	mov	r1, r6
 80013f4:	4622      	mov	r2, r4
 80013f6:	f7ff ff17 	bl	8001228 <memcpy>
 80013fa:	4631      	mov	r1, r6
 80013fc:	4638      	mov	r0, r7
 80013fe:	f7ff ff37 	bl	8001270 <_free_r>
 8001402:	e7e9      	b.n	80013d8 <_realloc_r+0x1c>
 8001404:	4635      	mov	r5, r6
 8001406:	e7e7      	b.n	80013d8 <_realloc_r+0x1c>

08001408 <_sbrk_r>:
 8001408:	b538      	push	{r3, r4, r5, lr}
 800140a:	2300      	movs	r3, #0
 800140c:	4c05      	ldr	r4, [pc, #20]	; (8001424 <_sbrk_r+0x1c>)
 800140e:	4605      	mov	r5, r0
 8001410:	4608      	mov	r0, r1
 8001412:	6023      	str	r3, [r4, #0]
 8001414:	f7ff fb76 	bl	8000b04 <_sbrk>
 8001418:	1c43      	adds	r3, r0, #1
 800141a:	d102      	bne.n	8001422 <_sbrk_r+0x1a>
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	b103      	cbz	r3, 8001422 <_sbrk_r+0x1a>
 8001420:	602b      	str	r3, [r5, #0]
 8001422:	bd38      	pop	{r3, r4, r5, pc}
 8001424:	20000138 	.word	0x20000138

08001428 <__malloc_lock>:
 8001428:	4770      	bx	lr

0800142a <__malloc_unlock>:
 800142a:	4770      	bx	lr

0800142c <_malloc_usable_size_r>:
 800142c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001430:	1f18      	subs	r0, r3, #4
 8001432:	2b00      	cmp	r3, #0
 8001434:	bfbc      	itt	lt
 8001436:	580b      	ldrlt	r3, [r1, r0]
 8001438:	18c0      	addlt	r0, r0, r3
 800143a:	4770      	bx	lr

0800143c <_init>:
 800143c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143e:	bf00      	nop
 8001440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001442:	bc08      	pop	{r3}
 8001444:	469e      	mov	lr, r3
 8001446:	4770      	bx	lr

08001448 <_fini>:
 8001448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144a:	bf00      	nop
 800144c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800144e:	bc08      	pop	{r3}
 8001450:	469e      	mov	lr, r3
 8001452:	4770      	bx	lr
