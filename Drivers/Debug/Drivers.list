
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f24  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001054  08001054  00011054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800106c  0800106c  00011074  2**0
                  CONTENTS
  4 .ARM          00000000  0800106c  0800106c  00011074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800106c  08001074  00011074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800106c  0800106c  0001106c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001070  08001070  00011070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000000  08001074  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08001074  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004631  00000000  00000000  0001109d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a8b  00000000  00000000  000156ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a5c  00000000  00000000  00016159  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00016bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000150  00000000  00000000  00016d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000026eb  00000000  00000000  00016eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002432  00000000  00000000  0001959b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008c62  00000000  00000000  0001b9cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002462f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000534  00000000  00000000  000246ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800103c 	.word	0x0800103c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800103c 	.word	0x0800103c

08000170 <SevenSegment_init>:

#include "SevenSegment.h"


void SevenSegment_init(_7Segment_t *Segment)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	Segment->A.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2204      	movs	r2, #4
 800017c:	719a      	strb	r2, [r3, #6]
	Segment->A.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2202      	movs	r2, #2
 8000182:	71da      	strb	r2, [r3, #7]
	GPIO_INIT(&(Segment->A));
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	4618      	mov	r0, r3
 8000188:	f000 fcd6 	bl	8000b38 <GPIO_INIT>

	Segment->B.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2204      	movs	r2, #4
 8000190:	739a      	strb	r2, [r3, #14]
	Segment->B.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2202      	movs	r2, #2
 8000196:	73da      	strb	r2, [r3, #15]
	GPIO_INIT(&(Segment->B));
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	3308      	adds	r3, #8
 800019c:	4618      	mov	r0, r3
 800019e:	f000 fccb 	bl	8000b38 <GPIO_INIT>

	Segment->C.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	2204      	movs	r2, #4
 80001a6:	759a      	strb	r2, [r3, #22]
	Segment->C.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2202      	movs	r2, #2
 80001ac:	75da      	strb	r2, [r3, #23]
	GPIO_INIT(&(Segment->C));
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	3310      	adds	r3, #16
 80001b2:	4618      	mov	r0, r3
 80001b4:	f000 fcc0 	bl	8000b38 <GPIO_INIT>


	Segment->D.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2204      	movs	r2, #4
 80001bc:	779a      	strb	r2, [r3, #30]
	Segment->D.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2202      	movs	r2, #2
 80001c2:	77da      	strb	r2, [r3, #31]
	GPIO_INIT(&(Segment->D));
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	3318      	adds	r3, #24
 80001c8:	4618      	mov	r0, r3
 80001ca:	f000 fcb5 	bl	8000b38 <GPIO_INIT>


	Segment->E.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2204      	movs	r2, #4
 80001d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Segment->E.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2202      	movs	r2, #2
 80001da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	GPIO_INIT(&(Segment->E));
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	3320      	adds	r3, #32
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 fca8 	bl	8000b38 <GPIO_INIT>


	Segment->F.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2204      	movs	r2, #4
 80001ec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	Segment->F.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2202      	movs	r2, #2
 80001f4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	GPIO_INIT(&(Segment->F));
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3328      	adds	r3, #40	; 0x28
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 fc9b 	bl	8000b38 <GPIO_INIT>


	Segment->G.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2204      	movs	r2, #4
 8000206:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Segment->G.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2202      	movs	r2, #2
 800020e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	GPIO_INIT(&(Segment->G));
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	3330      	adds	r3, #48	; 0x30
 8000216:	4618      	mov	r0, r3
 8000218:	f000 fc8e 	bl	8000b38 <GPIO_INIT>

}
 800021c:	bf00      	nop
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}

08000224 <SevenSegment_Print>:

void SevenSegment_Print(_7Segment_t *Segment, uint8_t value)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	460b      	mov	r3, r1
 800022e:	70fb      	strb	r3, [r7, #3]
	value &= ~(0xF0);
 8000230:	78fb      	ldrb	r3, [r7, #3]
 8000232:	f003 030f 	and.w	r3, r3, #15
 8000236:	70fb      	strb	r3, [r7, #3]
    switch(value)
 8000238:	78fb      	ldrb	r3, [r7, #3]
 800023a:	2b09      	cmp	r3, #9
 800023c:	f200 81bc 	bhi.w	80005b8 <SevenSegment_Print+0x394>
 8000240:	a201      	add	r2, pc, #4	; (adr r2, 8000248 <SevenSegment_Print+0x24>)
 8000242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000246:	bf00      	nop
 8000248:	08000271 	.word	0x08000271
 800024c:	080002c5 	.word	0x080002c5
 8000250:	08000319 	.word	0x08000319
 8000254:	0800036d 	.word	0x0800036d
 8000258:	080003c1 	.word	0x080003c1
 800025c:	08000415 	.word	0x08000415
 8000260:	08000469 	.word	0x08000469
 8000264:	080004bd 	.word	0x080004bd
 8000268:	08000511 	.word	0x08000511
 800026c:	08000565 	.word	0x08000565
    {
	    case 0:
	        GPIO_WRITE_PIN(&(Segment->A), HIGH);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2101      	movs	r1, #1
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fcf7 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->B), HIGH);
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	3308      	adds	r3, #8
 800027e:	2101      	movs	r1, #1
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fcf1 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->C), HIGH);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	3310      	adds	r3, #16
 800028a:	2101      	movs	r1, #1
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fceb 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->D), HIGH);
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3318      	adds	r3, #24
 8000296:	2101      	movs	r1, #1
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fce5 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->E), HIGH);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	3320      	adds	r3, #32
 80002a2:	2101      	movs	r1, #1
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fcdf 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->F), HIGH);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	3328      	adds	r3, #40	; 0x28
 80002ae:	2101      	movs	r1, #1
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fcd9 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->G), LOW);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	3330      	adds	r3, #48	; 0x30
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fcd3 	bl	8000c68 <GPIO_WRITE_PIN>
	        break;
 80002c2:	e1a3      	b.n	800060c <SevenSegment_Print+0x3e8>
	    case 1:
	        GPIO_WRITE_PIN(&(Segment->A), LOW);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2100      	movs	r1, #0
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 fccd 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->B), HIGH);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	3308      	adds	r3, #8
 80002d2:	2101      	movs	r1, #1
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fcc7 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->C), HIGH);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	3310      	adds	r3, #16
 80002de:	2101      	movs	r1, #1
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fcc1 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->D), LOW);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	3318      	adds	r3, #24
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fcbb 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->E), LOW);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	3320      	adds	r3, #32
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fcb5 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->F), LOW);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3328      	adds	r3, #40	; 0x28
 8000302:	2100      	movs	r1, #0
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fcaf 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->G), LOW);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	3330      	adds	r3, #48	; 0x30
 800030e:	2100      	movs	r1, #0
 8000310:	4618      	mov	r0, r3
 8000312:	f000 fca9 	bl	8000c68 <GPIO_WRITE_PIN>
	        break;
 8000316:	e179      	b.n	800060c <SevenSegment_Print+0x3e8>
	    case 2:
	        GPIO_WRITE_PIN(&(Segment->A), HIGH);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2101      	movs	r1, #1
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fca3 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->B), HIGH);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3308      	adds	r3, #8
 8000326:	2101      	movs	r1, #1
 8000328:	4618      	mov	r0, r3
 800032a:	f000 fc9d 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->C), LOW);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	3310      	adds	r3, #16
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fc97 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->D), HIGH);
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	3318      	adds	r3, #24
 800033e:	2101      	movs	r1, #1
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fc91 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->E), HIGH);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	3320      	adds	r3, #32
 800034a:	2101      	movs	r1, #1
 800034c:	4618      	mov	r0, r3
 800034e:	f000 fc8b 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->F), LOW);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	3328      	adds	r3, #40	; 0x28
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f000 fc85 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->G), HIGH);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	3330      	adds	r3, #48	; 0x30
 8000362:	2101      	movs	r1, #1
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fc7f 	bl	8000c68 <GPIO_WRITE_PIN>
	        break;
 800036a:	e14f      	b.n	800060c <SevenSegment_Print+0x3e8>
	    case 3:
	        GPIO_WRITE_PIN(&(Segment->A), HIGH);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2101      	movs	r1, #1
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fc79 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->B), HIGH);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	3308      	adds	r3, #8
 800037a:	2101      	movs	r1, #1
 800037c:	4618      	mov	r0, r3
 800037e:	f000 fc73 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->C), HIGH);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3310      	adds	r3, #16
 8000386:	2101      	movs	r1, #1
 8000388:	4618      	mov	r0, r3
 800038a:	f000 fc6d 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->D), HIGH);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	3318      	adds	r3, #24
 8000392:	2101      	movs	r1, #1
 8000394:	4618      	mov	r0, r3
 8000396:	f000 fc67 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->E), LOW);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	3320      	adds	r3, #32
 800039e:	2100      	movs	r1, #0
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fc61 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->F), LOW);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3328      	adds	r3, #40	; 0x28
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 fc5b 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->G), HIGH);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	3330      	adds	r3, #48	; 0x30
 80003b6:	2101      	movs	r1, #1
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fc55 	bl	8000c68 <GPIO_WRITE_PIN>
	        break;
 80003be:	e125      	b.n	800060c <SevenSegment_Print+0x3e8>
	    case 4:
	        GPIO_WRITE_PIN(&(Segment->A), LOW);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	2100      	movs	r1, #0
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 fc4f 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->B), HIGH);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	3308      	adds	r3, #8
 80003ce:	2101      	movs	r1, #1
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 fc49 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->C), HIGH);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3310      	adds	r3, #16
 80003da:	2101      	movs	r1, #1
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fc43 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->D), LOW);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	3318      	adds	r3, #24
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fc3d 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->E), LOW);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	3320      	adds	r3, #32
 80003f2:	2100      	movs	r1, #0
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fc37 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->F), HIGH);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3328      	adds	r3, #40	; 0x28
 80003fe:	2101      	movs	r1, #1
 8000400:	4618      	mov	r0, r3
 8000402:	f000 fc31 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->G), HIGH);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	3330      	adds	r3, #48	; 0x30
 800040a:	2101      	movs	r1, #1
 800040c:	4618      	mov	r0, r3
 800040e:	f000 fc2b 	bl	8000c68 <GPIO_WRITE_PIN>
	        break;
 8000412:	e0fb      	b.n	800060c <SevenSegment_Print+0x3e8>
	    case 5:
	        GPIO_WRITE_PIN(&(Segment->A), HIGH);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2101      	movs	r1, #1
 8000418:	4618      	mov	r0, r3
 800041a:	f000 fc25 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->B), LOW);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	3308      	adds	r3, #8
 8000422:	2100      	movs	r1, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f000 fc1f 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->C), HIGH);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	3310      	adds	r3, #16
 800042e:	2101      	movs	r1, #1
 8000430:	4618      	mov	r0, r3
 8000432:	f000 fc19 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->D), HIGH);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	3318      	adds	r3, #24
 800043a:	2101      	movs	r1, #1
 800043c:	4618      	mov	r0, r3
 800043e:	f000 fc13 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->E), LOW);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3320      	adds	r3, #32
 8000446:	2100      	movs	r1, #0
 8000448:	4618      	mov	r0, r3
 800044a:	f000 fc0d 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->F), HIGH);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3328      	adds	r3, #40	; 0x28
 8000452:	2101      	movs	r1, #1
 8000454:	4618      	mov	r0, r3
 8000456:	f000 fc07 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->G), HIGH);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	3330      	adds	r3, #48	; 0x30
 800045e:	2101      	movs	r1, #1
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fc01 	bl	8000c68 <GPIO_WRITE_PIN>
	        break;
 8000466:	e0d1      	b.n	800060c <SevenSegment_Print+0x3e8>
	    case 6:
	        GPIO_WRITE_PIN(&(Segment->A), HIGH);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2101      	movs	r1, #1
 800046c:	4618      	mov	r0, r3
 800046e:	f000 fbfb 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->B), LOW);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3308      	adds	r3, #8
 8000476:	2100      	movs	r1, #0
 8000478:	4618      	mov	r0, r3
 800047a:	f000 fbf5 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->C), HIGH);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	3310      	adds	r3, #16
 8000482:	2101      	movs	r1, #1
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fbef 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->D), HIGH);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	3318      	adds	r3, #24
 800048e:	2101      	movs	r1, #1
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fbe9 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->E), HIGH);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3320      	adds	r3, #32
 800049a:	2101      	movs	r1, #1
 800049c:	4618      	mov	r0, r3
 800049e:	f000 fbe3 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->F), HIGH);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	3328      	adds	r3, #40	; 0x28
 80004a6:	2101      	movs	r1, #1
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 fbdd 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->G), HIGH);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3330      	adds	r3, #48	; 0x30
 80004b2:	2101      	movs	r1, #1
 80004b4:	4618      	mov	r0, r3
 80004b6:	f000 fbd7 	bl	8000c68 <GPIO_WRITE_PIN>
	        break;
 80004ba:	e0a7      	b.n	800060c <SevenSegment_Print+0x3e8>
	    case 7:
	        GPIO_WRITE_PIN(&(Segment->A), HIGH);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2101      	movs	r1, #1
 80004c0:	4618      	mov	r0, r3
 80004c2:	f000 fbd1 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->B), HIGH);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	3308      	adds	r3, #8
 80004ca:	2101      	movs	r1, #1
 80004cc:	4618      	mov	r0, r3
 80004ce:	f000 fbcb 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->C), HIGH);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	3310      	adds	r3, #16
 80004d6:	2101      	movs	r1, #1
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 fbc5 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->D), LOW);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3318      	adds	r3, #24
 80004e2:	2100      	movs	r1, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fbbf 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->E), LOW);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	3320      	adds	r3, #32
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 fbb9 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->F), LOW);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3328      	adds	r3, #40	; 0x28
 80004fa:	2100      	movs	r1, #0
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 fbb3 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->G), LOW);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	3330      	adds	r3, #48	; 0x30
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f000 fbad 	bl	8000c68 <GPIO_WRITE_PIN>
	        break;
 800050e:	e07d      	b.n	800060c <SevenSegment_Print+0x3e8>
	    case 8:
	        GPIO_WRITE_PIN(&(Segment->A), HIGH);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2101      	movs	r1, #1
 8000514:	4618      	mov	r0, r3
 8000516:	f000 fba7 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->B), HIGH);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3308      	adds	r3, #8
 800051e:	2101      	movs	r1, #1
 8000520:	4618      	mov	r0, r3
 8000522:	f000 fba1 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->C), HIGH);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3310      	adds	r3, #16
 800052a:	2101      	movs	r1, #1
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fb9b 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->D), HIGH);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3318      	adds	r3, #24
 8000536:	2101      	movs	r1, #1
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fb95 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->E), HIGH);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3320      	adds	r3, #32
 8000542:	2101      	movs	r1, #1
 8000544:	4618      	mov	r0, r3
 8000546:	f000 fb8f 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->F), HIGH);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	3328      	adds	r3, #40	; 0x28
 800054e:	2101      	movs	r1, #1
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fb89 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->G), HIGH);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	3330      	adds	r3, #48	; 0x30
 800055a:	2101      	movs	r1, #1
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fb83 	bl	8000c68 <GPIO_WRITE_PIN>
	        break;
 8000562:	e053      	b.n	800060c <SevenSegment_Print+0x3e8>
	    case 9:
	        GPIO_WRITE_PIN(&(Segment->A), HIGH);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2101      	movs	r1, #1
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fb7d 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->B), HIGH);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	3308      	adds	r3, #8
 8000572:	2101      	movs	r1, #1
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fb77 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->C), HIGH);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3310      	adds	r3, #16
 800057e:	2101      	movs	r1, #1
 8000580:	4618      	mov	r0, r3
 8000582:	f000 fb71 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->D), HIGH);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3318      	adds	r3, #24
 800058a:	2101      	movs	r1, #1
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fb6b 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->E), LOW);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3320      	adds	r3, #32
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fb65 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->F), HIGH);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3328      	adds	r3, #40	; 0x28
 80005a2:	2101      	movs	r1, #1
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fb5f 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->G), HIGH);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3330      	adds	r3, #48	; 0x30
 80005ae:	2101      	movs	r1, #1
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fb59 	bl	8000c68 <GPIO_WRITE_PIN>
	        break;
 80005b6:	e029      	b.n	800060c <SevenSegment_Print+0x3e8>
	    default:
	        // Handle invalid values, perhaps turn off all segments
	        GPIO_WRITE_PIN(&(Segment->A), LOW);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fb53 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->B), LOW);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	3308      	adds	r3, #8
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fb4d 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->C), LOW);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3310      	adds	r3, #16
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fb47 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->D), LOW);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3318      	adds	r3, #24
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fb41 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->E), LOW);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3320      	adds	r3, #32
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fb3b 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->F), LOW);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3328      	adds	r3, #40	; 0x28
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fb35 	bl	8000c68 <GPIO_WRITE_PIN>
	        GPIO_WRITE_PIN(&(Segment->G), LOW);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3330      	adds	r3, #48	; 0x30
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fb2f 	bl	8000c68 <GPIO_WRITE_PIN>
	        break;
 800060a:	bf00      	nop
    }
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <Key_Init>:
#include "Keypad.h"

static uint8_t Btn[KEYPAD_ROW_][KEYPAD_COL_];

void Key_Init(Keypad_t *Keypad, const uint8_t D_char[KEYPAD_ROW_][KEYPAD_COL_])
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
	// Init Rows Wires to be O/P and Logic LOW
	for (int index = 0; index < KEYPAD_ROW_; index++)
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	e01d      	b.n	8000660 <Key_Init+0x4c>
	{
		Keypad->ROW[index].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	4413      	add	r3, r2
 800062c:	2204      	movs	r2, #4
 800062e:	719a      	strb	r2, [r3, #6]
		Keypad->ROW[index].GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	4413      	add	r3, r2
 8000638:	2202      	movs	r2, #2
 800063a:	71da      	strb	r2, [r3, #7]
		GPIO_INIT(&(Keypad->ROW[index]));
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	4413      	add	r3, r2
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fa77 	bl	8000b38 <GPIO_INIT>
		GPIO_WRITE_PIN(&(Keypad->ROW[index]), LOW);
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fb07 	bl	8000c68 <GPIO_WRITE_PIN>
	for (int index = 0; index < KEYPAD_ROW_; index++)
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	3301      	adds	r3, #1
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	2b03      	cmp	r3, #3
 8000664:	ddde      	ble.n	8000624 <Key_Init+0x10>
	}

	// Init Columns Wire to be I/P
	for (int index = 0; index < KEYPAD_COL_; index++)
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	e018      	b.n	800069e <Key_Init+0x8a>
	{
		Keypad->COL[index].GPIO_MODE = GPIO_MODE_INPUT_PD;
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	3304      	adds	r3, #4
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	4413      	add	r3, r2
 8000676:	2203      	movs	r2, #3
 8000678:	719a      	strb	r2, [r3, #6]
		Keypad->COL[index].GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	3304      	adds	r3, #4
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	4413      	add	r3, r2
 8000684:	2202      	movs	r2, #2
 8000686:	71da      	strb	r2, [r3, #7]
		GPIO_INIT(&(Keypad->COL[index]));
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	3304      	adds	r3, #4
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fa50 	bl	8000b38 <GPIO_INIT>
	for (int index = 0; index < KEYPAD_COL_; index++)
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	3301      	adds	r3, #1
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	dde3      	ble.n	800066c <Key_Init+0x58>
	}

	// Draw Keypad (2D Array) with Custom char
	for (int row = 0; row < KEYPAD_ROW_; row++)
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	e01a      	b.n	80006e0 <Key_Init+0xcc>
	{
		for (int col = 0; col < KEYPAD_COL_; col++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	e011      	b.n	80006d4 <Key_Init+0xc0>
		{
			Btn[row][col] =  D_char[row][col];
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	441a      	add	r2, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	4413      	add	r3, r2
 80006bc:	7819      	ldrb	r1, [r3, #0]
 80006be:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <Key_Init+0xdc>)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	441a      	add	r2, r3
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	4413      	add	r3, r2
 80006ca:	460a      	mov	r2, r1
 80006cc:	701a      	strb	r2, [r3, #0]
		for (int col = 0; col < KEYPAD_COL_; col++)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	ddea      	ble.n	80006b0 <Key_Init+0x9c>
	for (int row = 0; row < KEYPAD_ROW_; row++)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3301      	adds	r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	dde1      	ble.n	80006aa <Key_Init+0x96>
		}
	}
}
 80006e6:	bf00      	nop
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000001c 	.word	0x2000001c

080006f4 <Key_get>:


uint8_t Key_get(Keypad_t *Keypad)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	// Select Cell that you pressed on
	for (int row = 0; row < KEYPAD_ROW_; row++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	e049      	b.n	8000796 <Key_get+0xa2>
	{
		GPIO_WRITE_PIN(&(Keypad->ROW[row]), HIGH);
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	2101      	movs	r1, #1
 800070c:	4618      	mov	r0, r3
 800070e:	f000 faab 	bl	8000c68 <GPIO_WRITE_PIN>
		for (volatile int i = 0; i < 255; i++);
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	e002      	b.n	800071e <Key_get+0x2a>
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3301      	adds	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2bfe      	cmp	r3, #254	; 0xfe
 8000722:	ddf9      	ble.n	8000718 <Key_get+0x24>
		for (int col = 0; col < KEYPAD_COL_; col++)
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	e027      	b.n	800077a <Key_get+0x86>
		{

			if (GPIO_READ_PIN(&(Keypad->COL[col])) == HIGH)
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	3304      	adds	r3, #4
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fa83 	bl	8000c40 <GPIO_READ_PIN>
 800073a:	4603      	mov	r3, r0
 800073c:	2b01      	cmp	r3, #1
 800073e:	d119      	bne.n	8000774 <Key_get+0x80>
			{
				// In Future will Write Professional Delay
				for (volatile int i = 0; i < 100000; i++);
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	e002      	b.n	800074c <Key_get+0x58>
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	3301      	adds	r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <Key_get+0xb4>)
 8000750:	4293      	cmp	r3, r2
 8000752:	ddf8      	ble.n	8000746 <Key_get+0x52>
				GPIO_WRITE_PIN(&(Keypad->ROW[row]), LOW);
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4413      	add	r3, r2
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fa82 	bl	8000c68 <GPIO_WRITE_PIN>
				return Btn[row][col];
 8000764:	4a11      	ldr	r2, [pc, #68]	; (80007ac <Key_get+0xb8>)
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	441a      	add	r2, r3
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	e014      	b.n	800079e <Key_get+0xaa>
		for (int col = 0; col < KEYPAD_COL_; col++)
 8000774:	693b      	ldr	r3, [r7, #16]
 8000776:	3301      	adds	r3, #1
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	2b03      	cmp	r3, #3
 800077e:	ddd4      	ble.n	800072a <Key_get+0x36>
			}
		}
		GPIO_WRITE_PIN(&(Keypad->ROW[row]), LOW);
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	4413      	add	r3, r2
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fa6c 	bl	8000c68 <GPIO_WRITE_PIN>
	for (int row = 0; row < KEYPAD_ROW_; row++)
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	3301      	adds	r3, #1
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	2b03      	cmp	r3, #3
 800079a:	ddb2      	ble.n	8000702 <Key_get+0xe>
	}

	// In case you didn`t Press any thing
	return (uint8_t)' ';
 800079c:	2320      	movs	r3, #32
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	0001869f 	.word	0x0001869f
 80007ac:	2000001c 	.word	0x2000001c

080007b0 <LCD_8bit_init>:
						/*		 Function Definition		 */
						/*************************************/


void LCD_8bit_init(LCD_8bit_t *LCD)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	// Init RS & EN & DATA Lines
	LCD->RS.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2204      	movs	r2, #4
 80007bc:	719a      	strb	r2, [r3, #6]
	LCD->RS.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2202      	movs	r2, #2
 80007c2:	71da      	strb	r2, [r3, #7]
	LCD->EN.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2204      	movs	r2, #4
 80007c8:	739a      	strb	r2, [r3, #14]
	LCD->EN.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2202      	movs	r2, #2
 80007ce:	73da      	strb	r2, [r3, #15]
	GPIO_INIT(&(LCD->RS));
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 f9b0 	bl	8000b38 <GPIO_INIT>
	GPIO_INIT(&(LCD->EN));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3308      	adds	r3, #8
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f9ab 	bl	8000b38 <GPIO_INIT>
	GPIO_WRITE_PIN(&(LCD->RS), LOW);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fa3e 	bl	8000c68 <GPIO_WRITE_PIN>
	GPIO_WRITE_PIN(&(LCD->EN), LOW);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3308      	adds	r3, #8
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 fa38 	bl	8000c68 <GPIO_WRITE_PIN>
	for (char index = 0; index < 8; index++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	73fb      	strb	r3, [r7, #15]
 80007fc:	e021      	b.n	8000842 <LCD_8bit_init+0x92>
	{
		LCD->Data[(int)index].GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	3302      	adds	r3, #2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	2204      	movs	r2, #4
 800080a:	719a      	strb	r2, [r3, #6]
		LCD->Data[(int)index].GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	3302      	adds	r3, #2
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	4413      	add	r3, r2
 8000816:	2202      	movs	r2, #2
 8000818:	71da      	strb	r2, [r3, #7]
		GPIO_INIT(&(LCD->Data[(int)index]));
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	3302      	adds	r3, #2
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	4413      	add	r3, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f987 	bl	8000b38 <GPIO_INIT>
		GPIO_WRITE_PIN(&(LCD->Data[(int)index]), LOW);
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	3302      	adds	r3, #2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fa16 	bl	8000c68 <GPIO_WRITE_PIN>
	for (char index = 0; index < 8; index++)
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	3301      	adds	r3, #1
 8000840:	73fb      	strb	r3, [r7, #15]
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	2b07      	cmp	r3, #7
 8000846:	d9da      	bls.n	80007fe <LCD_8bit_init+0x4e>
	}

	// Following init from DataSheet
	// Delay from DataSheet 20 ms in future will write prof delay
	myWait(20);
 8000848:	2014      	movs	r0, #20
 800084a:	f000 f8f6 	bl	8000a3a <myWait>
	// Send this command from DataSheet
	LCD_8bit_Command(LCD, _LCD_8BIT_MODE | _LCD_2LINE);
 800084e:	2138      	movs	r1, #56	; 0x38
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f000 f865 	bl	8000920 <LCD_8bit_Command>
	// Delay from DataSheet 5 ms in future will write prof delay
	myWait(5);
 8000856:	2005      	movs	r0, #5
 8000858:	f000 f8ef 	bl	8000a3a <myWait>
	LCD_8bit_Command(LCD, _LCD_8BIT_MODE | _LCD_2LINE);
 800085c:	2138      	movs	r1, #56	; 0x38
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f85e 	bl	8000920 <LCD_8bit_Command>
	// Delay from DataSheet 100 micro sec in future will write prof delay
	myWait(1);
 8000864:	2001      	movs	r0, #1
 8000866:	f000 f8e8 	bl	8000a3a <myWait>
	// Init it with 8bit mode and 2 Line 5*8
	LCD_8bit_Command(LCD, _LCD_8BIT_MODE | _LCD_2LINE | _LCD_DOT_MATRIX_7);
 800086a:	2138      	movs	r1, #56	; 0x38
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f000 f857 	bl	8000920 <LCD_8bit_Command>

	// Send command to clear Screen
	LCD_8bit_Command(LCD, _LCD_CLEAR);
 8000872:	2101      	movs	r1, #1
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 f853 	bl	8000920 <LCD_8bit_Command>
	// Send command to set cursor at row 1 column 1
	LCD_8bit_Command(LCD, _LCD_RETURN_HOME);
 800087a:	2102      	movs	r1, #2
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f000 f84f 	bl	8000920 <LCD_8bit_Command>
	// Send command to Display on and Blink cursor on
	LCD_8bit_Command(LCD, _LCD_UNDERLINE_CURSOR_ON);
 8000882:	210e      	movs	r1, #14
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f000 f84b 	bl	8000920 <LCD_8bit_Command>
	// Send command to set cursor increamenet toward right after writing without shift display
	LCD_8bit_Command(LCD, _LCD_INC_CURSOR_SHIFT_OFF);
 800088a:	2106      	movs	r1, #6
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f847 	bl	8000920 <LCD_8bit_Command>
	// Send command that i ready to recieve data so i make the AC (Address counter) to First address in DDRAM
	LCD_8bit_Command(LCD, _LCD_DDRAM_START);
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f000 f843 	bl	8000920 <LCD_8bit_Command>
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <LCD_8bit_Set_Cursor>:

void LCD_8bit_Set_Cursor(LCD_8bit_t *LCD, uint8_t row, uint8_t column)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70fb      	strb	r3, [r7, #3]
 80008b0:	4613      	mov	r3, r2
 80008b2:	70bb      	strb	r3, [r7, #2]
	// Select row 1 or 2
	if ( (row == 2 || row == 1) && ((column > 0) && (column <= 16)) )
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d002      	beq.n	80008c0 <LCD_8bit_Set_Cursor+0x1c>
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d129      	bne.n	8000914 <LCD_8bit_Set_Cursor+0x70>
 80008c0:	78bb      	ldrb	r3, [r7, #2]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d026      	beq.n	8000914 <LCD_8bit_Set_Cursor+0x70>
 80008c6:	78bb      	ldrb	r3, [r7, #2]
 80008c8:	2b10      	cmp	r3, #16
 80008ca:	d823      	bhi.n	8000914 <LCD_8bit_Set_Cursor+0x70>
	{
		switch(row)
 80008cc:	78fb      	ldrb	r3, [r7, #3]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d002      	beq.n	80008d8 <LCD_8bit_Set_Cursor+0x34>
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d00e      	beq.n	80008f4 <LCD_8bit_Set_Cursor+0x50>
				LCD_8bit_Command(LCD, _LCD_ROW2_START + --column);
				AddressDD = 16 + column;
				break;
			}
	}
}
 80008d6:	e01d      	b.n	8000914 <LCD_8bit_Set_Cursor+0x70>
				LCD_8bit_Command(LCD, _LCD_ROW1_START + --column);
 80008d8:	78bb      	ldrb	r3, [r7, #2]
 80008da:	3b01      	subs	r3, #1
 80008dc:	70bb      	strb	r3, [r7, #2]
 80008de:	78bb      	ldrb	r3, [r7, #2]
 80008e0:	3b80      	subs	r3, #128	; 0x80
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4619      	mov	r1, r3
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f000 f81a 	bl	8000920 <LCD_8bit_Command>
				AddressDD = 0 + column;
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <LCD_8bit_Set_Cursor+0x78>)
 80008ee:	78bb      	ldrb	r3, [r7, #2]
 80008f0:	7013      	strb	r3, [r2, #0]
				break;
 80008f2:	e00f      	b.n	8000914 <LCD_8bit_Set_Cursor+0x70>
				LCD_8bit_Command(LCD, _LCD_ROW2_START + --column);
 80008f4:	78bb      	ldrb	r3, [r7, #2]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	70bb      	strb	r3, [r7, #2]
 80008fa:	78bb      	ldrb	r3, [r7, #2]
 80008fc:	3b40      	subs	r3, #64	; 0x40
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4619      	mov	r1, r3
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f000 f80c 	bl	8000920 <LCD_8bit_Command>
				AddressDD = 16 + column;
 8000908:	78bb      	ldrb	r3, [r7, #2]
 800090a:	3310      	adds	r3, #16
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b03      	ldr	r3, [pc, #12]	; (800091c <LCD_8bit_Set_Cursor+0x78>)
 8000910:	701a      	strb	r2, [r3, #0]
				break;
 8000912:	bf00      	nop
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000002c 	.word	0x2000002c

08000920 <LCD_8bit_Command>:
void LCD_8bit_Command(LCD_8bit_t *LCD, uint8_t command)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	70fb      	strb	r3, [r7, #3]
	// To Tell LCD That i will send command Write RS LOW @ref INFO (LCD.H)
	GPIO_WRITE_PIN(&(LCD->RS), LOW);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f000 f999 	bl	8000c68 <GPIO_WRITE_PIN>
	// Send 8bits Command on Wires Bit by Bit
	Send_8bit(LCD, command);
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	4619      	mov	r1, r3
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 f836 	bl	80009ac <Send_8bit>
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <LCD_8bit_Print_Char>:

void LCD_8bit_Print_Char(LCD_8bit_t *LCD, uint8_t data){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	70fb      	strb	r3, [r7, #3]

	if (AddressDD == 16) 	LCD_8bit_Set_Cursor(LCD, 2, 1);
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <LCD_8bit_Print_Char+0x60>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b10      	cmp	r3, #16
 800095a:	d105      	bne.n	8000968 <LCD_8bit_Print_Char+0x20>
 800095c:	2201      	movs	r2, #1
 800095e:	2102      	movs	r1, #2
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff ff9f 	bl	80008a4 <LCD_8bit_Set_Cursor>
 8000966:	e00b      	b.n	8000980 <LCD_8bit_Print_Char+0x38>
	else if (AddressDD == 32)
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <LCD_8bit_Print_Char+0x60>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b20      	cmp	r3, #32
 800096e:	d107      	bne.n	8000980 <LCD_8bit_Print_Char+0x38>
	{
		LCD_8bit_Set_Cursor(LCD, 1, 1);
 8000970:	2201      	movs	r2, #1
 8000972:	2101      	movs	r1, #1
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ff95 	bl	80008a4 <LCD_8bit_Set_Cursor>
		AddressDD = 0;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <LCD_8bit_Print_Char+0x60>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
	}
	AddressDD++;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <LCD_8bit_Print_Char+0x60>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <LCD_8bit_Print_Char+0x60>)
 800098a:	701a      	strb	r2, [r3, #0]
	// To Tell LCD That i will send Data Write RS HIGH @ref INFO (LCD.H)
	GPIO_WRITE_PIN(&(LCD->RS), HIGH);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2101      	movs	r1, #1
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f969 	bl	8000c68 <GPIO_WRITE_PIN>
	// Send 8bits data on Wires Bit by Bit
	Send_8bit(LCD, data);
 8000996:	78fb      	ldrb	r3, [r7, #3]
 8000998:	4619      	mov	r1, r3
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f000 f806 	bl	80009ac <Send_8bit>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000002c 	.word	0x2000002c

080009ac <Send_8bit>:
	Send_8bit(LCD, data);
}


static void Send_8bit(LCD_8bit_t *LCD, uint8_t _data_command)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	70fb      	strb	r3, [r7, #3]
	// Send 8bits data | command bit by bit
	for (char i = 0; i < 8; i++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]
 80009bc:	e012      	b.n	80009e4 <Send_8bit+0x38>
	{
		GPIO_WRITE_PIN( &(LCD->Data[(int)i]), ((_data_command >> (int)i) & 0x01) );
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	3302      	adds	r3, #2
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	18d0      	adds	r0, r2, r3
 80009c8:	78fa      	ldrb	r2, [r7, #3]
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	fa42 f303 	asr.w	r3, r2, r3
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4619      	mov	r1, r3
 80009da:	f000 f945 	bl	8000c68 <GPIO_WRITE_PIN>
	for (char i = 0; i < 8; i++)
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	3301      	adds	r3, #1
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	2b07      	cmp	r3, #7
 80009e8:	d9e9      	bls.n	80009be <Send_8bit+0x12>
	}

	// Enable Signal to Recieve Data or Command  |_ Falling Edge
	GPIO_WRITE_PIN(&(LCD->EN), HIGH);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3308      	adds	r3, #8
 80009ee:	2101      	movs	r1, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 f939 	bl	8000c68 <GPIO_WRITE_PIN>
	for(volatile char delay = 0; delay < 255; delay++);  //Small delay i will write professional delay after learning it
 80009f6:	2300      	movs	r3, #0
 80009f8:	73bb      	strb	r3, [r7, #14]
 80009fa:	e004      	b.n	8000a06 <Send_8bit+0x5a>
 80009fc:	7bbb      	ldrb	r3, [r7, #14]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	3301      	adds	r3, #1
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	73bb      	strb	r3, [r7, #14]
 8000a06:	7bbb      	ldrb	r3, [r7, #14]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2bff      	cmp	r3, #255	; 0xff
 8000a0c:	d1f6      	bne.n	80009fc <Send_8bit+0x50>
	GPIO_WRITE_PIN(&(LCD->EN), LOW);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3308      	adds	r3, #8
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 f927 	bl	8000c68 <GPIO_WRITE_PIN>
	for(volatile char delay = 0; delay < 255; delay++);
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	737b      	strb	r3, [r7, #13]
 8000a1e:	e004      	b.n	8000a2a <Send_8bit+0x7e>
 8000a20:	7b7b      	ldrb	r3, [r7, #13]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	3301      	adds	r3, #1
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	737b      	strb	r3, [r7, #13]
 8000a2a:	7b7b      	ldrb	r3, [r7, #13]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2bff      	cmp	r3, #255	; 0xff
 8000a30:	d1f6      	bne.n	8000a20 <Send_8bit+0x74>
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <myWait>:
}

#endif

static void myWait(volatile int ms)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b085      	sub	sp, #20
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
	for (volatile int i = 0; i < ms; i++) for (volatile int j = 0; j < 255; j++);
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	e00b      	b.n	8000a60 <myWait+0x26>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	e002      	b.n	8000a54 <myWait+0x1a>
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	3301      	adds	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	2bfe      	cmp	r3, #254	; 0xfe
 8000a58:	ddf9      	ble.n	8000a4e <myWait+0x14>
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbef      	blt.n	8000a48 <myWait+0xe>

}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <GetPos>:
							/*************************************/
							/*       Function Definition         */
							/*************************************/

uint8_t GetPos(PINy_t PinNumber)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	2b80      	cmp	r3, #128	; 0x80
 8000a80:	d042      	beq.n	8000b08 <GetPos+0x96>
 8000a82:	2b80      	cmp	r3, #128	; 0x80
 8000a84:	dc11      	bgt.n	8000aaa <GetPos+0x38>
 8000a86:	2b08      	cmp	r3, #8
 8000a88:	d036      	beq.n	8000af8 <GetPos+0x86>
 8000a8a:	2b08      	cmp	r3, #8
 8000a8c:	dc06      	bgt.n	8000a9c <GetPos+0x2a>
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d02e      	beq.n	8000af0 <GetPos+0x7e>
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	d02e      	beq.n	8000af4 <GetPos+0x82>
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d028      	beq.n	8000aec <GetPos+0x7a>
 8000a9a:	e047      	b.n	8000b2c <GetPos+0xba>
 8000a9c:	2b20      	cmp	r3, #32
 8000a9e:	d02f      	beq.n	8000b00 <GetPos+0x8e>
 8000aa0:	2b40      	cmp	r3, #64	; 0x40
 8000aa2:	d02f      	beq.n	8000b04 <GetPos+0x92>
 8000aa4:	2b10      	cmp	r3, #16
 8000aa6:	d029      	beq.n	8000afc <GetPos+0x8a>
 8000aa8:	e040      	b.n	8000b2c <GetPos+0xba>
 8000aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000aae:	d033      	beq.n	8000b18 <GetPos+0xa6>
 8000ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ab4:	dc09      	bgt.n	8000aca <GetPos+0x58>
 8000ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aba:	d029      	beq.n	8000b10 <GetPos+0x9e>
 8000abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ac0:	d028      	beq.n	8000b14 <GetPos+0xa2>
 8000ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ac6:	d021      	beq.n	8000b0c <GetPos+0x9a>
 8000ac8:	e030      	b.n	8000b2c <GetPos+0xba>
 8000aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ace:	d027      	beq.n	8000b20 <GetPos+0xae>
 8000ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad4:	dc03      	bgt.n	8000ade <GetPos+0x6c>
 8000ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ada:	d01f      	beq.n	8000b1c <GetPos+0xaa>
 8000adc:	e026      	b.n	8000b2c <GetPos+0xba>
 8000ade:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ae2:	d01f      	beq.n	8000b24 <GetPos+0xb2>
 8000ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ae8:	d01e      	beq.n	8000b28 <GetPos+0xb6>
 8000aea:	e01f      	b.n	8000b2c <GetPos+0xba>
	{
	case GPIO_PIN0:
		return 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	e01e      	b.n	8000b2e <GetPos+0xbc>
		break;
	case GPIO_PIN1:
		return 4;
 8000af0:	2304      	movs	r3, #4
 8000af2:	e01c      	b.n	8000b2e <GetPos+0xbc>
		break;
	case GPIO_PIN2:
		return 8;
 8000af4:	2308      	movs	r3, #8
 8000af6:	e01a      	b.n	8000b2e <GetPos+0xbc>
		break;
	case GPIO_PIN3:
		return 12;
 8000af8:	230c      	movs	r3, #12
 8000afa:	e018      	b.n	8000b2e <GetPos+0xbc>
		break;
	case GPIO_PIN4:
		return 16;
 8000afc:	2310      	movs	r3, #16
 8000afe:	e016      	b.n	8000b2e <GetPos+0xbc>
		break;
	case GPIO_PIN5:
		return 20;
 8000b00:	2314      	movs	r3, #20
 8000b02:	e014      	b.n	8000b2e <GetPos+0xbc>
		break;
	case GPIO_PIN6:
		return 24;
 8000b04:	2318      	movs	r3, #24
 8000b06:	e012      	b.n	8000b2e <GetPos+0xbc>
		break;
	case GPIO_PIN7:
		return 28;
 8000b08:	231c      	movs	r3, #28
 8000b0a:	e010      	b.n	8000b2e <GetPos+0xbc>
		break;
	case GPIO_PIN8:
		return 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e00e      	b.n	8000b2e <GetPos+0xbc>
		break;
	case GPIO_PIN9:
		return 4;
 8000b10:	2304      	movs	r3, #4
 8000b12:	e00c      	b.n	8000b2e <GetPos+0xbc>
		break;
	case GPIO_PIN10:
		return 8;
 8000b14:	2308      	movs	r3, #8
 8000b16:	e00a      	b.n	8000b2e <GetPos+0xbc>
		break;
	case GPIO_PIN11:
		return 12;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	e008      	b.n	8000b2e <GetPos+0xbc>
		break;
	case GPIO_PIN12:
		return 16;
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	e006      	b.n	8000b2e <GetPos+0xbc>
		break;
	case GPIO_PIN13:
		return 20;
 8000b20:	2314      	movs	r3, #20
 8000b22:	e004      	b.n	8000b2e <GetPos+0xbc>
		break;
	case GPIO_PIN14:
		return 24;
 8000b24:	2318      	movs	r3, #24
 8000b26:	e002      	b.n	8000b2e <GetPos+0xbc>
		break;
	case GPIO_PIN15:
		return 28;
 8000b28:	231c      	movs	r3, #28
 8000b2a:	e000      	b.n	8000b2e <GetPos+0xbc>
		break;
	default :
		return 0;
 8000b2c:	2300      	movs	r3, #0
		break;
	}
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <GPIO_INIT>:

void GPIO_INIT(GPIO_PinConfig_t *myPin)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	volatile uint32_t *configReg = NULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config = 0x0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]
	configReg = (myPin->GPIO_PinNumber < GPIO_PIN8) ? (&(myPin->GPIOx->CRL)) : (&(myPin->GPIOx->CRH));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	889b      	ldrh	r3, [r3, #4]
 8000b4c:	2bff      	cmp	r3, #255	; 0xff
 8000b4e:	d802      	bhi.n	8000b56 <GPIO_INIT+0x1e>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	e002      	b.n	8000b5c <GPIO_INIT+0x24>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	60bb      	str	r3, [r7, #8]
	// Clear CNF0[1:0] MODE0[1:0]
	(*configReg) &= ~(0xF << GetPos(myPin->GPIO_PinNumber));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	889b      	ldrh	r3, [r3, #4]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff85 	bl	8000a72 <GetPos>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	4093      	lsls	r3, r2
 8000b70:	43da      	mvns	r2, r3
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	401a      	ands	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	601a      	str	r2, [r3, #0]

	if ( (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (myPin->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	799b      	ldrb	r3, [r3, #6]
 8000b80:	2b07      	cmp	r3, #7
 8000b82:	d00b      	beq.n	8000b9c <GPIO_INIT+0x64>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	799b      	ldrb	r3, [r3, #6]
 8000b88:	2b06      	cmp	r3, #6
 8000b8a:	d007      	beq.n	8000b9c <GPIO_INIT+0x64>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	799b      	ldrb	r3, [r3, #6]
 8000b90:	2b05      	cmp	r3, #5
 8000b92:	d003      	beq.n	8000b9c <GPIO_INIT+0x64>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	799b      	ldrb	r3, [r3, #6]
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	d10e      	bne.n	8000bba <GPIO_INIT+0x82>
	{
		// Set CNF0[1:0] -> (his mode)  MODE0[1:0] -> 00
		Pin_Config = ((((myPin->GPIO_MODE - 4) << 2) | (myPin->GPIO_OUTPUT_Speed)) & 0x0F);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	799b      	ldrb	r3, [r3, #6]
 8000ba0:	3b04      	subs	r3, #4
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	b25a      	sxtb	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	79db      	ldrb	r3, [r3, #7]
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	4313      	orrs	r3, r2
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	e030      	b.n	8000c1c <GPIO_INIT+0xe4>
	}
	else
	{
		if (myPin->GPIO_MODE == GPIO_MODE_INPUT_AF) // Considered input Floating
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	799b      	ldrb	r3, [r3, #6]
 8000bbe:	2b08      	cmp	r3, #8
 8000bc0:	d102      	bne.n	8000bc8 <GPIO_INIT+0x90>
		{
			Pin_Config = ((GPIO_MODE_INPUT_FLO << 2 | 0x0) & 0x0F);
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	e029      	b.n	8000c1c <GPIO_INIT+0xe4>
		}
		else if (myPin->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	799b      	ldrb	r3, [r3, #6]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d10c      	bne.n	8000bea <GPIO_INIT+0xb2>
		{
			Pin_Config = ((GPIO_MODE_INPUT_PU << 2 | 0x0) & 0x0F);
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	73fb      	strb	r3, [r7, #15]
			//From Table 20. Port bit configuration table-> Set ODR->1 to set pin as Input Pull Up
			myPin->GPIOx->ODR |= (myPin->GPIO_PinNumber);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	68da      	ldr	r2, [r3, #12]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	889b      	ldrh	r3, [r3, #4]
 8000bde:	4619      	mov	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	430a      	orrs	r2, r1
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	e018      	b.n	8000c1c <GPIO_INIT+0xe4>
		}
		else if (myPin->GPIO_MODE == GPIO_MODE_INPUT_PD)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	799b      	ldrb	r3, [r3, #6]
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d10d      	bne.n	8000c0e <GPIO_INIT+0xd6>
		{
			Pin_Config = ((GPIO_MODE_INPUT_PU << 2) & 0x0F);
 8000bf2:	2308      	movs	r3, #8
 8000bf4:	73fb      	strb	r3, [r7, #15]
			//From Table 20. Port bit configuration table-> Set ODR->0 to set pin as Input Pull Down
			myPin->GPIOx->ODR &= ~(myPin->GPIO_PinNumber);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	889b      	ldrh	r3, [r3, #4]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	4619      	mov	r1, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	400a      	ands	r2, r1
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	e006      	b.n	8000c1c <GPIO_INIT+0xe4>
		}
		else
		{
			Pin_Config = ((myPin->GPIO_MODE << 2 | 0x0) & 0x0F);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	799b      	ldrb	r3, [r3, #6]
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	73fb      	strb	r3, [r7, #15]
		}
	}
	// Writing on CRL OR CRH Reg
	(*configReg) |= ((Pin_Config) << GetPos(myPin->GPIO_PinNumber));
 8000c1c:	7bfc      	ldrb	r4, [r7, #15]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	889b      	ldrh	r3, [r3, #4]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff25 	bl	8000a72 <GetPos>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	fa04 f203 	lsl.w	r2, r4, r3
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	431a      	orrs	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	601a      	str	r2, [r3, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd90      	pop	{r4, r7, pc}

08000c40 <GPIO_READ_PIN>:

uint8_t GPIO_READ_PIN(GPIO_PinConfig_t *myPin)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	if (myPin->GPIOx->IDR & myPin->GPIO_PinNumber) return 1;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	8892      	ldrh	r2, [r2, #4]
 8000c52:	4013      	ands	r3, r2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <GPIO_READ_PIN+0x1c>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e000      	b.n	8000c5e <GPIO_READ_PIN+0x1e>
	return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <GPIO_WRITE_PIN>:
{
	return ((uint16_t)GPIOx->IDR);
}

void GPIO_WRITE_PIN(GPIO_PinConfig_t *myPin, Logic_t Mode)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
	if (Mode) myPin->GPIOx->ODR |= (myPin->GPIO_PinNumber);
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00a      	beq.n	8000c90 <GPIO_WRITE_PIN+0x28>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68da      	ldr	r2, [r3, #12]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	889b      	ldrh	r3, [r3, #4]
 8000c84:	4619      	mov	r1, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	60da      	str	r2, [r3, #12]
	else      myPin->GPIOx->ODR &= ~(myPin->GPIO_PinNumber);
}
 8000c8e:	e00a      	b.n	8000ca6 <GPIO_WRITE_PIN+0x3e>
	else      myPin->GPIOx->ODR &= ~(myPin->GPIO_PinNumber);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	889b      	ldrh	r3, [r3, #4]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	400a      	ands	r2, r1
 8000ca4:	60da      	str	r2, [r3, #12]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <GPIO_TOGGLE_PIN>:
{
	GPIOx->ODR = value;
}

void GPIO_TOGGLE_PIN(GPIO_PinConfig_t *myPin)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	myPin->GPIOx->ODR ^= (myPin->GPIO_PinNumber);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	889b      	ldrh	r3, [r3, #4]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	404a      	eors	r2, r1
 8000cca:	60da      	str	r2, [r3, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <myWait>:
_7Segment_t segm;



static void myWait(volatile int ms)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b085      	sub	sp, #20
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
	for (volatile int i = 0; i < ms; i++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	e00b      	b.n	8000cfc <myWait+0x26>
	{
		for (volatile int j = 0; j < 255; j++);
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	e002      	b.n	8000cf0 <myWait+0x1a>
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	3301      	adds	r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	2bfe      	cmp	r3, #254	; 0xfe
 8000cf4:	ddf9      	ble.n	8000cea <myWait+0x14>
	for (volatile int i = 0; i < ms; i++)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbef      	blt.n	8000ce4 <myWait+0xe>
	}
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
	...

08000d10 <segm_init>:

void segm_init()
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
	segm.A.GPIOx = GPIOB;
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <segm_init+0x6c>)
 8000d16:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <segm_init+0x70>)
 8000d18:	601a      	str	r2, [r3, #0]
	segm.A.GPIO_PinNumber = GPIO_PIN9;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <segm_init+0x6c>)
 8000d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d20:	809a      	strh	r2, [r3, #4]

	segm.B.GPIOx = GPIOB;
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <segm_init+0x6c>)
 8000d24:	4a16      	ldr	r2, [pc, #88]	; (8000d80 <segm_init+0x70>)
 8000d26:	609a      	str	r2, [r3, #8]
	segm.B.GPIO_PinNumber = GPIO_PIN8;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <segm_init+0x6c>)
 8000d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2e:	819a      	strh	r2, [r3, #12]

	segm.C.GPIOx = GPIOB;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <segm_init+0x6c>)
 8000d32:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <segm_init+0x70>)
 8000d34:	611a      	str	r2, [r3, #16]
	segm.C.GPIO_PinNumber = GPIO_PIN7;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <segm_init+0x6c>)
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	829a      	strh	r2, [r3, #20]

	segm.D.GPIOx = GPIOB;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <segm_init+0x6c>)
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <segm_init+0x70>)
 8000d40:	619a      	str	r2, [r3, #24]
	segm.D.GPIO_PinNumber = GPIO_PIN15;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <segm_init+0x6c>)
 8000d44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d48:	839a      	strh	r2, [r3, #28]

	segm.E.GPIOx = GPIOB;
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <segm_init+0x6c>)
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	; (8000d80 <segm_init+0x70>)
 8000d4e:	621a      	str	r2, [r3, #32]
	segm.E.GPIO_PinNumber = GPIO_PIN14;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <segm_init+0x6c>)
 8000d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d56:	849a      	strh	r2, [r3, #36]	; 0x24

	segm.F.GPIOx = GPIOB;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <segm_init+0x6c>)
 8000d5a:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <segm_init+0x70>)
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
	segm.F.GPIO_PinNumber = GPIO_PIN13;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <segm_init+0x6c>)
 8000d60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d64:	859a      	strh	r2, [r3, #44]	; 0x2c

	segm.G.GPIOx = GPIOB;
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <segm_init+0x6c>)
 8000d68:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <segm_init+0x70>)
 8000d6a:	631a      	str	r2, [r3, #48]	; 0x30
	segm.G.GPIO_PinNumber = GPIO_PIN12;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <segm_init+0x6c>)
 8000d6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d72:	869a      	strh	r2, [r3, #52]	; 0x34

}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	20000030 	.word	0x20000030
 8000d80:	40010c00 	.word	0x40010c00

08000d84 <GPIO_test>:

void GPIO_test()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
		LED.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <GPIO_test+0x3c>)
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	719a      	strb	r2, [r3, #6]
		LED.GPIO_OUTPUT_Speed = GPIO_SPEED_2M;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <GPIO_test+0x3c>)
 8000d90:	2202      	movs	r2, #2
 8000d92:	71da      	strb	r2, [r3, #7]
		LED.GPIO_PinNumber = GPIO_PIN0;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <GPIO_test+0x3c>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	809a      	strh	r2, [r3, #4]
		LED.GPIOx = GPIOA;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <GPIO_test+0x3c>)
 8000d9c:	4a09      	ldr	r2, [pc, #36]	; (8000dc4 <GPIO_test+0x40>)
 8000d9e:	601a      	str	r2, [r3, #0]

		GPIO_INIT(&LED);
 8000da0:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <GPIO_test+0x3c>)
 8000da2:	f7ff fec9 	bl	8000b38 <GPIO_INIT>
		GPIO_WRITE_PIN(&LED, HIGH);
 8000da6:	2101      	movs	r1, #1
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <GPIO_test+0x3c>)
 8000daa:	f7ff ff5d 	bl	8000c68 <GPIO_WRITE_PIN>
		myWait(20);
 8000dae:	2014      	movs	r0, #20
 8000db0:	f7ff ff91 	bl	8000cd6 <myWait>
		GPIO_WRITE_PIN(&LED, HIGH);
 8000db4:	2101      	movs	r1, #1
 8000db6:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <GPIO_test+0x3c>)
 8000db8:	f7ff ff56 	bl	8000c68 <GPIO_WRITE_PIN>

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200000a8 	.word	0x200000a8
 8000dc4:	40010800 	.word	0x40010800

08000dc8 <KEY_init>:
	lcd1.Data[3].GPIOx = GPIOA;
	lcd1.Data[3].GPIO_PinNumber = GPIO_PIN8;

}*/

void KEY_init(){
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
	key1.ROW[0].GPIO_PinNumber = GPIO_PIN11;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <KEY_init+0x70>)
 8000dce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dd2:	809a      	strh	r2, [r3, #4]
	key1.ROW[0].GPIOx = GPIOB;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <KEY_init+0x70>)
 8000dd6:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <KEY_init+0x74>)
 8000dd8:	601a      	str	r2, [r3, #0]

	key1.ROW[1].GPIO_PinNumber = GPIO_PIN10;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <KEY_init+0x70>)
 8000ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de0:	819a      	strh	r2, [r3, #12]
	key1.ROW[1].GPIOx = GPIOB;
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <KEY_init+0x70>)
 8000de4:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <KEY_init+0x74>)
 8000de6:	609a      	str	r2, [r3, #8]

	key1.ROW[2].GPIO_PinNumber = GPIO_PIN1;
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <KEY_init+0x70>)
 8000dea:	2202      	movs	r2, #2
 8000dec:	829a      	strh	r2, [r3, #20]
	key1.ROW[2].GPIOx = GPIOB;
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <KEY_init+0x70>)
 8000df0:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <KEY_init+0x74>)
 8000df2:	611a      	str	r2, [r3, #16]

	key1.ROW[3].GPIO_PinNumber = GPIO_PIN0;
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <KEY_init+0x70>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	839a      	strh	r2, [r3, #28]
	key1.ROW[3].GPIOx = GPIOB;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <KEY_init+0x70>)
 8000dfc:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <KEY_init+0x74>)
 8000dfe:	619a      	str	r2, [r3, #24]

	key1.COL[0].GPIO_PinNumber = GPIO_PIN7;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <KEY_init+0x70>)
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	849a      	strh	r2, [r3, #36]	; 0x24
	key1.COL[0].GPIOx = GPIOA;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <KEY_init+0x70>)
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <KEY_init+0x78>)
 8000e0a:	621a      	str	r2, [r3, #32]

	key1.COL[1].GPIO_PinNumber = GPIO_PIN6;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <KEY_init+0x70>)
 8000e0e:	2240      	movs	r2, #64	; 0x40
 8000e10:	859a      	strh	r2, [r3, #44]	; 0x2c
	key1.COL[1].GPIOx = GPIOA;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <KEY_init+0x70>)
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <KEY_init+0x78>)
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28

	key1.COL[2].GPIO_PinNumber = GPIO_PIN5;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <KEY_init+0x70>)
 8000e1a:	2220      	movs	r2, #32
 8000e1c:	869a      	strh	r2, [r3, #52]	; 0x34
	key1.COL[2].GPIOx = GPIOA;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <KEY_init+0x70>)
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <KEY_init+0x78>)
 8000e22:	631a      	str	r2, [r3, #48]	; 0x30

	key1.COL[3].GPIO_PinNumber = GPIO_PIN4;
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <KEY_init+0x70>)
 8000e26:	2210      	movs	r2, #16
 8000e28:	879a      	strh	r2, [r3, #60]	; 0x3c
	key1.COL[3].GPIOx = GPIOA;
 8000e2a:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <KEY_init+0x70>)
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <KEY_init+0x78>)
 8000e2e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	20000068 	.word	0x20000068
 8000e3c:	40010c00 	.word	0x40010c00
 8000e40:	40010800 	.word	0x40010800

08000e44 <LCD_init>:

void LCD_init()
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
	lcd2.RS.GPIOx = GPIOB;
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <LCD_init+0x94>)
 8000e4a:	4a24      	ldr	r2, [pc, #144]	; (8000edc <LCD_init+0x98>)
 8000e4c:	601a      	str	r2, [r3, #0]
	lcd2.RS.GPIO_PinNumber = GPIO_PIN6;
 8000e4e:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <LCD_init+0x94>)
 8000e50:	2240      	movs	r2, #64	; 0x40
 8000e52:	809a      	strh	r2, [r3, #4]

	lcd2.EN.GPIOx = GPIOB;
 8000e54:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <LCD_init+0x94>)
 8000e56:	4a21      	ldr	r2, [pc, #132]	; (8000edc <LCD_init+0x98>)
 8000e58:	609a      	str	r2, [r3, #8]
	lcd2.EN.GPIO_PinNumber = GPIO_PIN5;
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <LCD_init+0x94>)
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	819a      	strh	r2, [r3, #12]

	lcd2.Data[0].GPIOx = GPIOB;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <LCD_init+0x94>)
 8000e62:	4a1e      	ldr	r2, [pc, #120]	; (8000edc <LCD_init+0x98>)
 8000e64:	611a      	str	r2, [r3, #16]
	lcd2.Data[0].GPIO_PinNumber = GPIO_PIN4;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <LCD_init+0x94>)
 8000e68:	2210      	movs	r2, #16
 8000e6a:	829a      	strh	r2, [r3, #20]

	lcd2.Data[1].GPIOx = GPIOB;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <LCD_init+0x94>)
 8000e6e:	4a1b      	ldr	r2, [pc, #108]	; (8000edc <LCD_init+0x98>)
 8000e70:	619a      	str	r2, [r3, #24]
	lcd2.Data[1].GPIO_PinNumber = GPIO_PIN3;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <LCD_init+0x94>)
 8000e74:	2208      	movs	r2, #8
 8000e76:	839a      	strh	r2, [r3, #28]

	lcd2.Data[2].GPIOx = GPIOA;
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <LCD_init+0x94>)
 8000e7a:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <LCD_init+0x9c>)
 8000e7c:	621a      	str	r2, [r3, #32]
	lcd2.Data[2].GPIO_PinNumber = GPIO_PIN15;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <LCD_init+0x94>)
 8000e80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e84:	849a      	strh	r2, [r3, #36]	; 0x24

	lcd2.Data[3].GPIOx = GPIOA;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <LCD_init+0x94>)
 8000e88:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <LCD_init+0x9c>)
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
	lcd2.Data[3].GPIO_PinNumber = GPIO_PIN12;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <LCD_init+0x94>)
 8000e8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e92:	859a      	strh	r2, [r3, #44]	; 0x2c

	lcd2.Data[4].GPIOx = GPIOA;
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <LCD_init+0x94>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <LCD_init+0x9c>)
 8000e98:	631a      	str	r2, [r3, #48]	; 0x30
	lcd2.Data[4].GPIO_PinNumber = GPIO_PIN11;
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <LCD_init+0x94>)
 8000e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ea0:	869a      	strh	r2, [r3, #52]	; 0x34

	lcd2.Data[5].GPIOx = GPIOA;
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <LCD_init+0x94>)
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <LCD_init+0x9c>)
 8000ea6:	639a      	str	r2, [r3, #56]	; 0x38
	lcd2.Data[5].GPIO_PinNumber = GPIO_PIN10;
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <LCD_init+0x94>)
 8000eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eae:	879a      	strh	r2, [r3, #60]	; 0x3c

	lcd2.Data[6].GPIOx = GPIOA;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <LCD_init+0x94>)
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <LCD_init+0x9c>)
 8000eb4:	641a      	str	r2, [r3, #64]	; 0x40
	lcd2.Data[6].GPIO_PinNumber = GPIO_PIN9;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <LCD_init+0x94>)
 8000eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	lcd2.Data[7].GPIOx = GPIOA;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <LCD_init+0x94>)
 8000ec2:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <LCD_init+0x9c>)
 8000ec4:	649a      	str	r2, [r3, #72]	; 0x48
	lcd2.Data[7].GPIO_PinNumber = GPIO_PIN8;
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <LCD_init+0x94>)
 8000ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ecc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	200000b0 	.word	0x200000b0
 8000edc:	40010c00 	.word	0x40010c00
 8000ee0:	40010800 	.word	0x40010800

08000ee4 <clock_init>:

void clock_init()
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	// Enable CLK FOR GPIO B
	RCC_GPIOB_CLK_EN;
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <clock_init+0x24>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <clock_init+0x24>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	6193      	str	r3, [r2, #24]

	// Enable CLK FOR GPIO A
	RCC_GPIOA_CLK_EN;
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <clock_init+0x24>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a03      	ldr	r2, [pc, #12]	; (8000f08 <clock_init+0x24>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6193      	str	r3, [r2, #24]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	40021000 	.word	0x40021000

08000f0c <main>:


int main(void)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
	clock_init();
 8000f12:	f7ff ffe7 	bl	8000ee4 <clock_init>
	LCD_init();
 8000f16:	f7ff ff95 	bl	8000e44 <LCD_init>
	KEY_init();
 8000f1a:	f7ff ff55 	bl	8000dc8 <KEY_init>
	segm_init();
 8000f1e:	f7ff fef7 	bl	8000d10 <segm_init>
	const uint8_t Char[KEYPAD_ROW_][KEYPAD_COL_] = {{'7', '8', '9', '/'},
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <main+0x7c>)
 8000f24:	f107 040c 	add.w	r4, r7, #12
 8000f28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
													{'4', '5', '6', '*'},
													{'1', '2', '3', '-'},
													{'#', '0', '=', '+'}};
	Key_Init(&key1, Char);
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	4619      	mov	r1, r3
 8000f34:	4815      	ldr	r0, [pc, #84]	; (8000f8c <main+0x80>)
 8000f36:	f7ff fb6d 	bl	8000614 <Key_Init>
	LCD_8bit_init(&lcd2);
 8000f3a:	4815      	ldr	r0, [pc, #84]	; (8000f90 <main+0x84>)
 8000f3c:	f7ff fc38 	bl	80007b0 <LCD_8bit_init>
	SevenSegment_init(&segm);
 8000f40:	4814      	ldr	r0, [pc, #80]	; (8000f94 <main+0x88>)
 8000f42:	f7ff f915 	bl	8000170 <SevenSegment_init>
	GPIO_test();
 8000f46:	f7ff ff1d 	bl	8000d84 <GPIO_test>

	uint8_t Character[8] ={ 0b00000, 0b00000, 0b01010, 0b11111, 0b11111, 0b01110, 0b00100, 0b00000 };
 8000f4a:	4a13      	ldr	r2, [pc, #76]	; (8000f98 <main+0x8c>)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f52:	e883 0003 	stmia.w	r3, {r0, r1}
//	LCD_8bit_Display_OFF(&lcd2);
//	myWait(1000);
//	LCD_8bit_Display_ON(&lcd2);
	while(1)
	{
		uint8_t press = Key_get(&key1);
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <main+0x80>)
 8000f58:	f7ff fbcc 	bl	80006f4 <Key_get>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	77fb      	strb	r3, [r7, #31]


		if (press != ' ')
 8000f60:	7ffb      	ldrb	r3, [r7, #31]
 8000f62:	2b20      	cmp	r3, #32
 8000f64:	d009      	beq.n	8000f7a <main+0x6e>
		{
			SevenSegment_Print(&segm, press);
 8000f66:	7ffb      	ldrb	r3, [r7, #31]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480a      	ldr	r0, [pc, #40]	; (8000f94 <main+0x88>)
 8000f6c:	f7ff f95a 	bl	8000224 <SevenSegment_Print>
			LCD_8bit_Print_Char(&lcd2, press);
 8000f70:	7ffb      	ldrb	r3, [r7, #31]
 8000f72:	4619      	mov	r1, r3
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <main+0x84>)
 8000f76:	f7ff fce7 	bl	8000948 <LCD_8bit_Print_Char>
		}


		GPIO_TOGGLE_PIN(&LED);
 8000f7a:	4808      	ldr	r0, [pc, #32]	; (8000f9c <main+0x90>)
 8000f7c:	f7ff fe98 	bl	8000cb0 <GPIO_TOGGLE_PIN>
		myWait(10);
 8000f80:	200a      	movs	r0, #10
 8000f82:	f7ff fea8 	bl	8000cd6 <myWait>
	{
 8000f86:	e7e6      	b.n	8000f56 <main+0x4a>
 8000f88:	08001054 	.word	0x08001054
 8000f8c:	20000068 	.word	0x20000068
 8000f90:	200000b0 	.word	0x200000b0
 8000f94:	20000030 	.word	0x20000030
 8000f98:	08001064 	.word	0x08001064
 8000f9c:	200000a8 	.word	0x200000a8

08000fa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fa2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fa4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000faa:	490d      	ldr	r1, [pc, #52]	; (8000fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <LoopForever+0xe>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc0:	4c0a      	ldr	r4, [pc, #40]	; (8000fec <LoopForever+0x16>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fce:	f000 f811 	bl	8000ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fd2:	f7ff ff9b 	bl	8000f0c <main>

08000fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd6:	e7fe      	b.n	8000fd6 <LoopForever>
  ldr   r0, =_estack
 8000fd8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000fe4:	08001074 	.word	0x08001074
  ldr r2, =_sbss
 8000fe8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000fec:	20000100 	.word	0x20000100

08000ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC1_2_IRQHandler>
	...

08000ff4 <__libc_init_array>:
 8000ff4:	b570      	push	{r4, r5, r6, lr}
 8000ff6:	2500      	movs	r5, #0
 8000ff8:	4e0c      	ldr	r6, [pc, #48]	; (800102c <__libc_init_array+0x38>)
 8000ffa:	4c0d      	ldr	r4, [pc, #52]	; (8001030 <__libc_init_array+0x3c>)
 8000ffc:	1ba4      	subs	r4, r4, r6
 8000ffe:	10a4      	asrs	r4, r4, #2
 8001000:	42a5      	cmp	r5, r4
 8001002:	d109      	bne.n	8001018 <__libc_init_array+0x24>
 8001004:	f000 f81a 	bl	800103c <_init>
 8001008:	2500      	movs	r5, #0
 800100a:	4e0a      	ldr	r6, [pc, #40]	; (8001034 <__libc_init_array+0x40>)
 800100c:	4c0a      	ldr	r4, [pc, #40]	; (8001038 <__libc_init_array+0x44>)
 800100e:	1ba4      	subs	r4, r4, r6
 8001010:	10a4      	asrs	r4, r4, #2
 8001012:	42a5      	cmp	r5, r4
 8001014:	d105      	bne.n	8001022 <__libc_init_array+0x2e>
 8001016:	bd70      	pop	{r4, r5, r6, pc}
 8001018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800101c:	4798      	blx	r3
 800101e:	3501      	adds	r5, #1
 8001020:	e7ee      	b.n	8001000 <__libc_init_array+0xc>
 8001022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001026:	4798      	blx	r3
 8001028:	3501      	adds	r5, #1
 800102a:	e7f2      	b.n	8001012 <__libc_init_array+0x1e>
 800102c:	0800106c 	.word	0x0800106c
 8001030:	0800106c 	.word	0x0800106c
 8001034:	0800106c 	.word	0x0800106c
 8001038:	08001070 	.word	0x08001070

0800103c <_init>:
 800103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800103e:	bf00      	nop
 8001040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001042:	bc08      	pop	{r3}
 8001044:	469e      	mov	lr, r3
 8001046:	4770      	bx	lr

08001048 <_fini>:
 8001048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104a:	bf00      	nop
 800104c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800104e:	bc08      	pop	{r3}
 8001050:	469e      	mov	lr, r3
 8001052:	4770      	bx	lr
